import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as l}from"./app-B8OghdsB.js";const n={};function t(p,s){return l(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="babel编译为低版本es时-为什么能编译语法但无法编译api" tabindex="-1"><a class="header-anchor" href="#babel编译为低版本es时-为什么能编译语法但无法编译api"><span>Babel编译为低版本ES时，为什么能编译语法但无法编译API？</span></a></h1><hr><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>Babel 的主要功能是将现代 JavaScript 语法转换为低版本的语法，以确保代码在旧版浏览器中能够运行。编译语法的能力主要来源于 Babel 的插件系统，而对于 API（如 Promise、Map 等），它们通常是由 JavaScript 引擎提供的原生功能，Babel 并不负责这些功能的实现。</p><p>1） 编译语法：Babel 可以解析和转换新语法（如箭头函数、类等），将其转为旧版语法（如普通函数和构造函数），以确保语法兼容性。</p><p>2） 无法编译 API：对于 JavaScript 内置的 API，Babel 只负责语法的转换，不会将缺失的 API 自动 polyfill。对于这些 API，开发者需要手动引入 polyfill（如 core-js）以支持旧浏览器。</p><h3 id="_1-babel-插件" tabindex="-1"><a class="header-anchor" href="#_1-babel-插件"><span>1） Babel 插件</span></a></h3><p>Babel 使用插件来处理不同的语法特性，例如：</p><ul><li><code>@babel/plugin-transform-arrow-functions</code>：转换箭头函数。</li><li><code>@babel/plugin-transform-classes</code>：转换类语法。</li></ul><p>这些插件负责将新语法转换为兼容的旧语法。</p><h3 id="_2-polyfill-机制" tabindex="-1"><a class="header-anchor" href="#_2-polyfill-机制"><span>2） Polyfill 机制</span></a></h3><p>为了支持缺失的 API，可以使用 polyfill 解决方案。例如：</p><ul><li>core-js：一个广泛使用的 polyfill 库，可以为新特性提供支持。</li><li>regenerator-runtime：用于支持生成器和 async/await。</li></ul><h3 id="_3-配置-babel" tabindex="-1"><a class="header-anchor" href="#_3-配置-babel"><span>3） 配置 Babel</span></a></h3><p>可以在 Babel 配置文件中使用 <code>@babel/preset-env</code> 结合 polyfill 的方式，确保 API 的支持：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;presets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;useBuiltIns&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;entry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;corejs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;targets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;browsers&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&gt; 0.25%, not dead&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-运行时处理" tabindex="-1"><a class="header-anchor" href="#_4-运行时处理"><span>4） 运行时处理</span></a></h3><p>在使用 Babel 的同时，还需要注意目标浏览器的兼容性，合理引入 polyfill，以确保在不同环境中都能顺利运行。</p><p>总结: Babel 专注于语法转换，无法自动处理缺失的 API，因此需要通过 polyfill 手动引入以实现完整的功能兼容性。</p>`,19)])])}const o=a(n,[["render",t]]),d=JSON.parse('{"path":"/guide/source-code/Babel%E7%BC%96%E8%AF%91%E4%B8%BA%E4%BD%8E%E7%89%88%E6%9C%ACES%E6%97%B6_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E7%BC%96%E8%AF%91%E8%AF%AD%E6%B3%95%E4%BD%86%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%91API.html","title":"Babel编译为低版本ES时，为什么能编译语法但无法编译API？","lang":"zh-CN","frontmatter":{"description":"Babel编译为低版本ES时，为什么能编译语法但无法编译API？ 原理 Babel 的主要功能是将现代 JavaScript 语法转换为低版本的语法，以确保代码在旧版浏览器中能够运行。编译语法的能力主要来源于 Babel 的插件系统，而对于 API（如 Promise、Map 等），它们通常是由 JavaScript 引擎提供的原生功能，Babel 并...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Babel编译为低版本ES时，为什么能编译语法但无法编译API？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/source-code/Babel%E7%BC%96%E8%AF%91%E4%B8%BA%E4%BD%8E%E7%89%88%E6%9C%ACES%E6%97%B6_%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E7%BC%96%E8%AF%91%E8%AF%AD%E6%B3%95%E4%BD%86%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%91API.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"Babel编译为低版本ES时，为什么能编译语法但无法编译API？"}],["meta",{"property":"og:description","content":"Babel编译为低版本ES时，为什么能编译语法但无法编译API？ 原理 Babel 的主要功能是将现代 JavaScript 语法转换为低版本的语法，以确保代码在旧版浏览器中能够运行。编译语法的能力主要来源于 Babel 的插件系统，而对于 API（如 Promise、Map 等），它们通常是由 JavaScript 引擎提供的原生功能，Babel 并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"guide/source-code/Babel编译为低版本ES时,为什么能编译语法但无法编译API.md","autoDesc":true}');export{o as comp,d as data};
