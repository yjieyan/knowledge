import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as t}from"./app-CQQ8MGpo.js";const e={};function l(d,s){return t(),n("div",null,[...s[0]||(s[0]=[a(`<h1 id="vue2-生命周期、vue3-生命周期" tabindex="-1"><a class="header-anchor" href="#vue2-生命周期、vue3-生命周期"><span>Vue2 生命周期、Vue3 生命周期</span></a></h1><p>Vue 组件的生命周期定义了组件从创建到销毁的整个过程中，在特定阶段会自动执行的“钩子函数”。</p><hr><h3 id="第一部分-vue-2-生命周期" tabindex="-1"><a class="header-anchor" href="#第一部分-vue-2-生命周期"><span>第一部分：Vue 2 生命周期</span></a></h3><p>Vue 2 的生命周期可以分为四个主要阶段：<strong>创建、挂载、更新、销毁</strong>。</p><h4 id="各阶段详解" tabindex="-1"><a class="header-anchor" href="#各阶段详解"><span>各阶段详解</span></a></h4><p><strong>1. 创建阶段</strong></p><ul><li><p><strong><code>beforeCreate</code></strong></p><ul><li><strong>时机：</strong> 在实例初始化之后，数据观测 (<code>data observer</code>) 和 event/watcher 事件配置之前被调用。</li><li><strong>特点：</strong> 此时无法访问到 <code>data</code>、<code>computed</code>、<code>methods</code> 等。</li><li><strong>使用场景：</strong> 通常用于一些初始化非响应式的变量。</li></ul></li><li><p><strong><code>created</code></strong></p><ul><li><strong>时机：</strong> 在实例创建完成后被立即调用。在这一步，实例已完成以下配置：数据观测、属性和方法的运算、watch/event 事件回调。</li><li><strong>特点：</strong> 可以访问到 <code>data</code>、<code>computed</code>、<code>methods</code> 等。<strong>但 <code>$el</code> 属性尚不可用</strong>，DOM 还未生成。</li><li><strong>使用场景：</strong> 这是最常用的钩子之一！常用于进行<strong>异步数据请求</strong>、初始化一些不依赖 DOM 的数据。</li></ul></li></ul><p><strong>2. 挂载阶段</strong></p><ul><li><p><strong><code>beforeMount</code></strong></p><ul><li><strong>时机：</strong> 在挂载开始之前被调用。相关的 <code>render</code> 函数首次被调用。<strong>该钩子在服务器端渲染期间不被调用。</strong></li><li><strong>特点：</strong> 模板已在内存中编译好，但尚未挂载到页面中。</li></ul></li><li><p><strong><code>mounted</code></strong></p><ul><li><strong>时机：</strong> 实例被挂载后调用，这时 <code>vm.$el</code> 已替换为真正的 DOM 元素。</li><li><strong>特点：</strong> 可以操作 DOM 了。<strong>但不保证所有子组件也都一起被挂载。</strong> 如果需要等待整个视图都渲染完毕，可以在内部使用 <code>this.$nextTick</code>。</li><li><strong>使用场景：</strong> 用于执行需要操作 DOM 的代码、初始化第三方库（如图表库）、监听自定义事件等。</li></ul></li></ul><p><strong>3. 更新阶段</strong> (当数据变化时触发)</p><ul><li><p><strong><code>beforeUpdate</code></strong></p><ul><li><strong>时机：</strong> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><strong>特点：</strong> 可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<strong>访问到的 DOM 是更新前的状态。</strong></li><li><strong>使用场景：</strong> 用于在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</li></ul></li><li><p><strong><code>updated</code></strong></p><ul><li><strong>时机：</strong> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁完毕之后调用。</li><li><strong>特点：</strong> 组件的 DOM 已经更新。<strong>同样不保证所有子组件都更新完毕。</strong></li><li><strong>使用场景：</strong> 执行依赖于新 DOM 的操作。但要避免在这个钩子里修改状态，否则可能导致无限更新循环！</li></ul></li></ul><p><strong>4. 销毁阶段</strong></p><ul><li><p><strong><code>beforeDestroy</code></strong></p><ul><li><strong>时机：</strong> 实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><strong>特点：</strong> 这是销毁前的最后机会。</li><li><strong>使用场景：</strong> <strong>这是最重要的清理时机！</strong> 用于清除定时器、取消未完成的网络请求、解绑自定义事件监听器等，防止内存泄漏。</li></ul></li><li><p><strong><code>destroyed</code></strong></p><ul><li><strong>时机：</strong> 实例销毁后调用。对应 Vue 实例的所有指令都被解绑，所有事件监听器被移除，所有子实例也都被销毁。</li><li><strong>特点：</strong> 几乎什么事都做不了了。</li></ul></li></ul><hr><h3 id="第二部分-vue-3-生命周期" tabindex="-1"><a class="header-anchor" href="#第二部分-vue-3-生命周期"><span>第二部分：Vue 3 生命周期</span></a></h3><p>Vue 3 的生命周期在概念上与 Vue 2 基本一致，但有一些重要的变化：</p><ol><li><code>beforeDestroy</code> 更名为 <code>beforeUnmount</code></li><li><code>destroyed</code> 更名为 <code>unmounted</code></li><li>所有生命周期钩子都需要从 Vue 中导入，并在 <code>setup()</code> 函数中使用。</li><li>Composition API 提供了对应的“生命周期注册函数”，名称前加 <code>on</code>。</li></ol><h4 id="vue-3-选项式-api-vs-组合式-api-生命周期映射" tabindex="-1"><a class="header-anchor" href="#vue-3-选项式-api-vs-组合式-api-生命周期映射"><span>Vue 3 选项式 API vs 组合式 API 生命周期映射</span></a></h4><table><thead><tr><th style="text-align:left;">Vue 2 钩子</th><th style="text-align:left;">Vue 3 选项式 API</th><th style="text-align:left;">Vue 3 组合式 API ( inside <code>setup()</code> )</th></tr></thead><tbody><tr><td style="text-align:left;"><code>beforeCreate</code></td><td style="text-align:left;">❌ <strong>不再需要</strong></td><td style="text-align:left;">使用 <code>setup()</code> 本身替代</td></tr><tr><td style="text-align:left;"><code>created</code></td><td style="text-align:left;">❌ <strong>不再需要</strong></td><td style="text-align:left;">使用 <code>setup()</code> 本身替代</td></tr><tr><td style="text-align:left;"><code>beforeMount</code></td><td style="text-align:left;"><code>beforeMount</code></td><td style="text-align:left;"><code>onBeforeMount</code></td></tr><tr><td style="text-align:left;"><code>mounted</code></td><td style="text-align:left;"><code>mounted</code></td><td style="text-align:left;"><code>onMounted</code></td></tr><tr><td style="text-align:left;"><code>beforeUpdate</code></td><td style="text-align:left;"><code>beforeUpdate</code></td><td style="text-align:left;"><code>onBeforeUpdate</code></td></tr><tr><td style="text-align:left;"><code>updated</code></td><td style="text-align:left;"><code>updated</code></td><td style="text-align:left;"><code>onUpdated</code></td></tr><tr><td style="text-align:left;"><code>beforeDestroy</code></td><td style="text-align:left;"><code>**beforeUnmount**</code></td><td style="text-align:left;"><code>onBeforeUnmount</code></td></tr><tr><td style="text-align:left;"><code>destroyed</code></td><td style="text-align:left;"><code>**unmounted**</code></td><td style="text-align:left;"><code>onUnmounted</code></td></tr><tr><td style="text-align:left;"><code>errorCaptured</code></td><td style="text-align:left;"><code>errorCaptured</code></td><td style="text-align:left;"><code>onErrorCaptured</code></td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;"><code>renderTracked</code> (Dev)</td><td style="text-align:left;"><code>onRenderTracked</code> (Dev)</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;"><code>renderTriggered</code> (Dev)</td><td style="text-align:left;"><code>onRenderTriggered</code> (Dev)</td></tr></tbody></table><h4 id="组合式-api-使用示例" tabindex="-1"><a class="header-anchor" href="#组合式-api-使用示例"><span>组合式 API 使用示例</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onUpdated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onUnmounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 生命周期函数可以多次调用，并按注册顺序执行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;组件挂载完成!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 初始化操作，如获取数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onUpdated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;组件更新了!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // DOM 更新后的操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onUnmounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;组件卸载了!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 清理操作，如清除定时器、取消请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 可以再注册一个 onMounted，它们会按顺序执行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;这是第二个 mounted 钩子&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      count</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关于 <code>setup()</code> 替代 <code>beforeCreate</code> 和 <code>created</code>：</strong><br> 在 <code>setup()</code> 函数中，你可以直接编写原本需要在 <code>created</code> 中执行的代码（如发起请求、初始化数据）。因为 <code>setup()</code> 的执行时机相当于 Vue 2 的 <code>beforeCreate</code> 和 <code>created</code> 之间，此时组件实例尚未完全创建，但响应式数据、计算属性、方法等已经可用。</p><hr><h3 id="第三部分-对比总结与最佳实践" tabindex="-1"><a class="header-anchor" href="#第三部分-对比总结与最佳实践"><span>第三部分：对比总结与最佳实践</span></a></h3><h4 id="核心变化总结" tabindex="-1"><a class="header-anchor" href="#核心变化总结"><span>核心变化总结</span></a></h4><ol><li><strong>命名变化：</strong> <code>beforeDestroy</code> -&gt; <code>beforeUnmount</code>，<code>destroyed</code> -&gt; <code>unmounted</code>。新名称更语义化。</li><li><strong>API 风格：</strong> Vue 3 组合式 API 使用 <code>onXxx</code> 的形式注册生命周期钩子，使其更函数式，并且可以在一个组件中多次使用同一个钩子。</li><li><strong><code>setup()</code> 替代：</strong> <code>beforeCreate</code> 和 <code>created</code> 被 <code>setup()</code> 函数取代。</li></ol><h4 id="常用生命周期钩子实践" tabindex="-1"><a class="header-anchor" href="#常用生命周期钩子实践"><span>常用生命周期钩子实践</span></a></h4><table><thead><tr><th style="text-align:left;">钩子</th><th style="text-align:left;">常用操作</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>created</code> / <code>setup()</code></strong></td><td style="text-align:left;"><strong>异步数据请求</strong>、初始化非 DOM 相关的数据、与后端的 WebSocket 连接。</td></tr><tr><td style="text-align:left;"><strong><code>mounted</code> / <code>onMounted</code></strong></td><td style="text-align:left;"><strong>操作 DOM</strong>、初始化依赖 DOM 的第三方库（如地图、图表）、监听原生 DOM 事件。</td></tr><tr><td style="text-align:left;"><strong><code>beforeUpdate</code> / <code>onBeforeUpdate</code></strong></td><td style="text-align:left;">在更新前获取 DOM 状态（如滚动位置）。</td></tr><tr><td style="text-align:left;"><strong><code>updated</code> / <code>onUpdated</code></strong></td><td style="text-align:left;">在 DOM 更新后执行操作（谨慎使用，避免循环更新）。</td></tr><tr><td style="text-align:left;"><strong><code>beforeUnmount</code> / <code>onBeforeUnmount</code></strong></td><td style="text-align:left;"><strong>清理定时器</strong>、<strong>取消网络请求</strong>、<strong>解绑自定义事件</strong>、取消订阅。</td></tr></tbody></table><h4 id="代码示例-一个完整的-vue-3-组件" tabindex="-1"><a class="header-anchor" href="#代码示例-一个完整的-vue-3-组件"><span>代码示例：一个完整的 Vue 3 组件</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ count }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> @click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;count++&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Increment&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> @click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stopTimer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Stop Timer&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onUnmounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 相当于 mounted</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Component is mounted!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      timer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setInterval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 相当于 beforeUnmount</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onUnmounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Component is about to unmount!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        clearInterval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        timer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stopTimer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        clearInterval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        timer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      stopTimer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>Vue 2</strong> 的钩子直接定义为组件选项的方法。</li><li><strong>Vue 3</strong> 保持了选项式 API 的兼容，但在组合式 API 中，它们是以 <code>onXxx</code> 函数的形式在 <code>setup()</code> 中注册的。</li></ul>`,33)])])}const k=i(e,[["render",l]]),r=JSON.parse('{"path":"/guide/source-code/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"Vue2 生命周期、Vue3 生命周期","lang":"zh-CN","frontmatter":{"description":"Vue2 生命周期、Vue3 生命周期 Vue 组件的生命周期定义了组件从创建到销毁的整个过程中，在特定阶段会自动执行的“钩子函数”。 第一部分：Vue 2 生命周期 Vue 2 的生命周期可以分为四个主要阶段：创建、挂载、更新、销毁。 各阶段详解 1. 创建阶段 beforeCreate 时机： 在实例初始化之后，数据观测 (data observe...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2 生命周期、Vue3 生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/source-code/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"Vue2 生命周期、Vue3 生命周期"}],["meta",{"property":"og:description","content":"Vue2 生命周期、Vue3 生命周期 Vue 组件的生命周期定义了组件从创建到销毁的整个过程中，在特定阶段会自动执行的“钩子函数”。 第一部分：Vue 2 生命周期 Vue 2 的生命周期可以分为四个主要阶段：创建、挂载、更新、销毁。 各阶段详解 1. 创建阶段 beforeCreate 时机： 在实例初始化之后，数据观测 (data observe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.24,"words":1571},"filePathRelative":"guide/source-code/Vue生命周期.md","autoDesc":true}');export{k as comp,r as data};
