import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as l,b as n,d as r,e as g,w as i,r as T,o as a}from"./app-Bp9_QJkp.js";const d={};function p(P,t){const o=T("RouteLink");return a(),s("div",null,[t[5]||(t[5]=l('<h1 id="http和https" tabindex="-1"><a class="header-anchor" href="#http和https"><span>HTTP和HTTPS</span></a></h1><hr><h3 id="_1-核心定义与概述" tabindex="-1"><a class="header-anchor" href="#_1-核心定义与概述"><span>1. 核心定义与概述</span></a></h3><ul><li><strong>HTTP：</strong> <strong>超文本传输协议</strong>。它是一种用于在Web浏览器和Web服务器之间传输信息的<strong>应用层协议</strong>。HTTP是明文传输的，意味着数据在客户端和服务器之间像“寄明信片”一样，任何人都可以在传输过程中看到其内容。</li><li><strong>HTTPS：</strong> <strong>安全的超文本传输协议</strong>。它不是一个新的协议，而是 <strong>HTTP over SSL/TLS</strong> 的简称。可以理解为在HTTP协议之下增加了一个<strong>安全层</strong>，使得数据像在“安全的加密管道”中传输，防止被窃听和篡改。</li></ul><hr><h3 id="_2-深入工作原理" tabindex="-1"><a class="header-anchor" href="#_2-深入工作原理"><span>2. 深入工作原理</span></a></h3><h4 id="http-的工作原理" tabindex="-1"><a class="header-anchor" href="#http-的工作原理"><span>HTTP 的工作原理</span></a></h4><p>非常简单直接，基于<strong>请求-响应</strong>模型：</p><ol><li><strong>建立TCP连接：</strong> 浏览器通过TCP的80端口与服务器建立连接。</li><li><strong>发送HTTP请求：</strong> 浏览器发送一个明文的HTTP请求报文。</li><li><strong>返回HTTP响应：</strong> 服务器返回一个明文的HTTP响应报文。</li><li><strong>关闭连接（或保持）：</strong> 传输完成，连接可能关闭或为下一个请求保持打开。</li></ol><p><strong>关键缺陷：</strong></p><ul><li><strong>窃听：</strong> 攻击者可以拦截数据包，轻松获取密码、信用卡号、聊天记录等敏感信息。</li><li><strong>篡改：</strong> 攻击者可以修改传输中的数据，例如插入广告或恶意代码。</li><li><strong>冒充：</strong> 攻击者可以伪装成目标网站，进行网络钓鱼。</li></ul><h4 id="https-的工作原理" tabindex="-1"><a class="header-anchor" href="#https-的工作原理"><span>HTTPS 的工作原理</span></a></h4><p>HTTPS在HTTP和TCP之间加入了 <strong>SSL/TLS</strong> 协议层，通过一系列精巧的步骤来建立安全连接。</p><p><strong>建立安全连接的核心步骤（SSL/TLS握手简化版）：</strong></p><ol><li><p><strong>TCP三次握手：</strong> 客户端连接到服务器的<strong>443端口</strong>。</p></li><li><p><strong>SSL/TLS握手：</strong></p><ul><li><strong>a. ClientHello：</strong> 客户端向服务器发送信息，包括： <ul><li>支持的SSL/TLS版本。</li><li>支持的加密套件列表。</li><li>一个客户端随机数。</li></ul></li><li><strong>b. ServerHello：</strong> 服务器回应信息，包括： <ul><li>确认使用的SSL/TLS版本和加密套件。</li><li>服务器的数字证书（包含<strong>公钥</strong>）。</li><li>一个服务器随机数。</li></ul></li><li><strong>c. 验证证书：</strong> <strong>这是最关键的一步。</strong> 客户端（浏览器）验证服务器的证书： <ul><li>是否由可信的证书颁发机构签发？</li><li>是否在有效期内？</li><li>证书中的域名是否与正在访问的域名匹配？</li><li>如果验证失败，浏览器会显示严重的警告信息。</li></ul></li><li><strong>d. 生成预主密钥：</strong> 客户端生成第三个随机数，称为“预主密钥”，并使用服务器的<strong>公钥</strong>进行加密，然后发送给服务器。</li><li><strong>e. 生成会话密钥：</strong> 客户端和服务器现在都拥有三个随机数：客户端随机数、服务器随机数和预主密钥。它们各自使用这三个随机数，通过相同的算法独立生成一个<strong>对称加密的会话密钥</strong>。</li><li><strong>f. 握手结束：</strong> 双方交换一条用会话密钥加密的“完成”消息，以验证握手过程是否成功。</li></ul></li><li><p><strong>加密通信：</strong> 握手完成后，双方使用生成的<strong>会话密钥</strong>进行对称加密，传输所有的HTTP数据。这是因为对称加密比非对称加密的计算开销小得多，效率更高。</p></li></ol><p><strong>简单比喻：</strong></p><ol><li>服务器把一把打开的<strong>挂锁（公钥）</strong> 和它的<strong>身份证（证书）</strong> 给你。</li><li>你检查身份证真伪（<strong>验证证书</strong>）。</li><li>你写一张纸条（<strong>预主密钥</strong>），放进一个盒子，用这把挂锁锁上，寄回给服务器（只有服务器有<strong>私钥</strong>能打开）。</li><li>现在你们俩都有一个共同的<strong>秘密（会话密钥）</strong>，之后的所有通信都用这个秘密来加密和解密。</li></ol><hr><h3 id="_3-http-与-https-的全面对比" tabindex="-1"><a class="header-anchor" href="#_3-http-与-https-的全面对比"><span>3. HTTP 与 HTTPS 的全面对比</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">HTTP</th><th style="text-align:left;">HTTPS</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>协议与端口</strong></td><td style="text-align:left;">应用层，默认端口 <strong>80</strong></td><td style="text-align:left;">在SSL/TLS安全层之上，默认端口 <strong>443</strong></td></tr><tr><td style="text-align:left;"><strong>安全性</strong></td><td style="text-align:left;"><strong>明文传输</strong>，无任何安全措施</td><td style="text-align:left;"><strong>加密传输</strong>，防止窃听、篡改和冒充</td></tr><tr><td style="text-align:left;"><strong>SEO</strong></td><td style="text-align:left;">谷歌等搜索引擎会<strong>降低</strong>其排名</td><td style="text-align:left;">是搜索引擎排名的一个<strong>正面信号</strong></td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">连接建立快，无加密开销</td><td style="text-align:left;">由于SSL/TLS握手，<strong>初始连接稍慢</strong>，但后续通信因使用对称加密，性能损失很小。HTTP/2的多路复用可以弥补甚至超越。</td></tr><tr><td style="text-align:left;"><strong>证书</strong></td><td style="text-align:left;">不需要</td><td style="text-align:left;">需要由<strong>证书颁发机构</strong>签发的SSL证书</td></tr><tr><td style="text-align:left;"><strong>数据完整性</strong></td><td style="text-align:left;">无法保证数据在传输过程中未被修改</td><td style="text-align:left;">通过消息认证码保证数据<strong>完整性</strong></td></tr><tr><td style="text-align:left;"><strong>身份认证</strong></td><td style="text-align:left;">无法确认通信方的身份</td><td style="text-align:left;">通过证书<strong>验证服务器</strong>的身份</td></tr></tbody></table><hr><h3 id="_4-为什么https是现在的绝对标准" tabindex="-1"><a class="header-anchor" href="#_4-为什么https是现在的绝对标准"><span>4. 为什么HTTPS是现在的绝对标准？</span></a></h3><ol><li><strong>安全与隐私：</strong> 这是最根本的原因。保护用户数据是法律和道德的要求。</li><li><strong>浏览器强制与标记：</strong> 现代浏览器（如Chrome）会将所有使用HTTP的网站标记为 <strong>“不安全”</strong> ，这会严重损害用户信任。</li><li><strong>现代Web API的前提：</strong> 许多强大的Web API（如 <strong>Service Worker</strong>, <strong>Geolocation</strong>, <strong>Push Notifications</strong> 等）都要求网站在HTTPS上下文中运行。</li><li><strong>HTTP/2 和 HTTP/3 的性能优势：</strong> 主流浏览器<strong>只允许在HTTPS上使用HTTP/2和HTTP/3</strong>。这意味着，如果你想享受多路复用、头部压缩等带来的巨大性能提升，你必须使用HTTPS。</li><li><strong>SEO需求：</strong> 为了获得更好的搜索排名，网站必须使用HTTPS。</li></ol><hr><h3 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h3><ul><li><strong>开发环境：</strong> 现在很多现代前端工具链（如Vite, Create React App）默认就使用HTTPS开发服务器。</li><li><strong>资源引用：</strong> 必须注意<strong>混合内容</strong>问题。如果一个HTTPS页面中引入了HTTP资源（如图片、脚本、样式），浏览器会阻止加载这些“不安全”的资源，并报错。<strong>解决方案是使用相对协议（<code>//example.com/resource.js</code>）或直接全部使用HTTPS。</strong></li><li><strong>API调用：</strong> 前端应用调用的后端API也必须支持HTTPS。</li><li><strong>理解证书：</strong> 需要了解不同种类的证书（如域名验证DV、组织验证OV、扩展验证EV）及其区别，以便与运维或后端团队协作。</li></ul>',26)),n("p",null,[t[1]||(t[1]=r("HTTPS不是对HTTP的简单替代，而是为其穿上了一套坚固的盔甲。在当今的互联网环境下，",-1)),t[2]||(t[2]=n("strong",null,"HTTPS已经不是一种“可选项”，而是构建任何现代、可信、高性能网站的“必需品”",-1)),t[3]||(t[3]=r("。",-1)),g(o,{to:"/guide/computer/%E7%BD%91%E7%BB%9C/%E4%BB%8EHTTP%E8%BF%81%E7%A7%BB%E5%88%B0HTTPS.html"},{default:i(()=>[...t[0]||(t[0]=[r("从HTTP迁移到HTTPS",-1)])]),_:1}),t[4]||(t[4]=r("是Web开发中一项必要且回报极高的投资。",-1))])])}const S=e(d,[["render",p]]),c=JSON.parse('{"path":"/guide/computer/%E7%BD%91%E7%BB%9C/HTTP%E5%92%8CHTTPS.html","title":"HTTP和HTTPS","lang":"zh-CN","frontmatter":{"description":"HTTP和HTTPS 1. 核心定义与概述 HTTP： 超文本传输协议。它是一种用于在Web浏览器和Web服务器之间传输信息的应用层协议。HTTP是明文传输的，意味着数据在客户端和服务器之间像“寄明信片”一样，任何人都可以在传输过程中看到其内容。 HTTPS： 安全的超文本传输协议。它不是一个新的协议，而是 HTTP over SSL/TLS 的简称。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP和HTTPS\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/%E7%BD%91%E7%BB%9C/HTTP%E5%92%8CHTTPS.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"HTTP和HTTPS"}],["meta",{"property":"og:description","content":"HTTP和HTTPS 1. 核心定义与概述 HTTP： 超文本传输协议。它是一种用于在Web浏览器和Web服务器之间传输信息的应用层协议。HTTP是明文传输的，意味着数据在客户端和服务器之间像“寄明信片”一样，任何人都可以在传输过程中看到其内容。 HTTPS： 安全的超文本传输协议。它不是一个新的协议，而是 HTTP over SSL/TLS 的简称。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.47,"words":1642},"filePathRelative":"guide/computer/网络/HTTP和HTTPS.md","autoDesc":true}');export{S as comp,c as data};
