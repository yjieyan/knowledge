import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as l}from"./app-DtG3coGW.js";const t={};function o(a,i){return l(),s("div",null,[...i[0]||(i[0]=[n(`<h1 id="vuecli-原理分析" tabindex="-1"><a class="header-anchor" href="#vuecli-原理分析"><span>VueCli 原理分析</span></a></h1><p>Vue CLI 的本质是一个<strong>基于 Webpack 的、针对 Vue.js 项目进行了深度优化的前端构建工具链和项目脚手架</strong>。它的核心目标是为开发者提供<strong>开箱即用、可配置、可扩展</strong>的现代化开发体验。</p><ol><li><strong>架构设计与核心模块</strong></li><li><strong>命令执行流程与插件系统</strong></li><li><strong>Webpack 配置的生成与管理</strong></li><li><strong>开发环境与生产环境构建</strong></li><li><strong>与 Vite 的对比（理解其时代定位）</strong></li></ol><hr><h3 id="_1-架构设计与核心模块" tabindex="-1"><a class="header-anchor" href="#_1-架构设计与核心模块"><span>1. 架构设计与核心模块</span></a></h3><p>Vue CLI 采用了 <strong>&quot; Monorepo + 插件化 &quot;</strong> 的架构，其核心由三个独立发布的 npm 包组成：</p><ul><li><p><strong><code>@vue/cli</code> (全局安装)</strong>：这是面向用户的<strong>命令行界面（CLI）</strong>。它提供了 <code>vue create</code>、<code>vue serve</code>、<code>vue build</code> 等终端命令。它的职责是：</p><ul><li>解析用户输入的命令和参数。</li><li>触发并管理项目的创建、安装依赖等流程。</li><li>调用 <code>@vue/cli-service</code> 来执行具体的构建任务。</li></ul></li><li><p><strong><code>@vue/cli-service</code> (项目本地安装)</strong>：这是 Vue CLI 的<strong>核心构建引擎</strong>。它被安装在每个 Vue 项目中，是一个<strong>本地开发依赖</strong>。它的职责是：</p><ul><li>管理和配置 <strong>Webpack</strong>。</li><li>提供 <code>serve</code>、<code>build</code>、<code>inspect</code> 等核心 NPM Scripts 命令。</li><li>加载和执行 <strong>Vue CLI 插件</strong>。</li><li>读取并合并用户的 <code>vue.config.js</code> 配置。</li></ul></li><li><p><strong><code>@vue/cli-plugin-*</code> (项目本地安装)</strong>：这是 Vue CLI 的<strong>功能扩展单元</strong>。每一个插件都为项目添加一个特定的功能，例如：</p><ul><li><code>@vue/cli-plugin-router</code>：集成 Vue Router。</li><li><code>@vue/cli-plugin-vuex</code>：集成 Vuex。</li><li><code>@vue/cli-plugin-eslint</code>：集成 ESLint。</li><li><code>@vue/cli-plugin-pwa</code>：添加 PWA 支持。</li></ul></li></ul><p><strong>这种架构的优势在于</strong>：</p><ul><li><strong>职责分离</strong>：CLI 负责交互和项目初始化，Service 负责核心构建，Plugin 负责功能扩展。</li><li><strong>灵活性</strong>：用户可以通过选择和组合不同的插件来定制项目功能。</li><li><strong>可升级性</strong>：各个部分可以独立迭代和升级。</li></ul><hr><h3 id="_2-命令执行流程与插件系统" tabindex="-1"><a class="header-anchor" href="#_2-命令执行流程与插件系统"><span>2. 命令执行流程与插件系统</span></a></h3><p>以最常用的 <code>vue create my-project</code> 为例，其内部执行流程如下：</p><ol><li><strong>环境检查</strong>：检查 Node.js 版本、npm/yarn 等环境是否符合要求。</li><li><strong>交互式预设（Preset）选择</strong>： <ul><li>弹出提示，让用户选择默认预设、手动选择特性，或使用之前保存的预设。</li><li>&quot;手动选择特性&quot; 本质上就是让用户勾选需要安装的插件列表（Babel, Router, Vuex, CSS Pre-processors, Linter等）。</li></ul></li><li><strong>项目骨架生成</strong>： <ul><li>根据用户选择，生成对应的 <code>package.json</code> 文件，其中已经包含了核心依赖 <code>@vue/cli-service</code> 和所选插件。</li><li>将内置的模板文件（位于 <code>@vue/cli</code> 的 <code>template</code> 目录）渲染并复制到项目目录。这个过程是<strong>高度可定制</strong>的，模板中可以使用 EJS 语法，并根据用户的选择条件性地渲染文件。</li></ul></li><li><strong>依赖安装</strong>：执行 <code>npm install</code> 或 <code>yarn</code> 安装所有依赖。</li><li><strong>插件安装与调用</strong>： <ul><li>依赖安装完成后，CLI 会遍历 <code>package.json</code> 中所有以 <code>@vue/cli-plugin-</code> 开头的依赖。</li><li>依次调用每个插件的 <strong>Generator API</strong>。Generator 是插件的一个核心部分，它可以： <ul><li><strong>向 <code>package.json</code> 注入新的依赖</strong>（如 <code>vue-router</code>）。</li><li><strong>修改项目的文件</strong>（例如，在选择了 Router 插件后，它会自动生成 <code>src/views/</code> 目录和 <code>src/router/index.js</code> 文件）。</li><li><strong>在 <code>vue.config.js</code> 中注入默认配置</strong>。</li></ul></li></ul></li></ol><p><strong>插件的核心钩子</strong>：<br> 一个 Vue CLI 插件通常包含两个主要部分：</p><ul><li><strong>Service 插件</strong>：必须导出一个函数，该函数接收一个 <code>api</code> 对象。它通过 <code>api.chainWebpack</code> 或 <code>api.configureWebpack</code> 来修改 Webpack 配置。这是在<strong>运行时</strong>生效的。</li><li><strong>Generator</strong>：可选，导出一个接收 <code>api</code> 和 <code>options</code> 的对象。它通过 <code>api.extendPackage</code> 和 <code>api.render</code> 来修改项目文件和配置。这是在<strong>项目创建时</strong>生效的。</li></ul><hr><h3 id="_3-webpack-配置的生成与管理" tabindex="-1"><a class="header-anchor" href="#_3-webpack-配置的生成与管理"><span>3. Webpack 配置的生成与管理</span></a></h3><p>这是 <code>@vue/cli-service</code> 最核心的工作。它并没有使用一个静态的 <code>webpack.config.js</code> 文件，而是<strong>动态生成</strong>的。</p><p><strong>核心机制：Webpack Chain</strong></p><p>Vue CLI 使用了 <code>webpack-chain</code> 库。这个库提供了一套链式 API 来修改 Webpack 配置。相比于直接操作一个巨大的 JavaScript 对象，链式配置更<strong>可读、可维护、且易于合并</strong>。</p><p><strong>配置的生成顺序（非常重要）</strong>：</p><ol><li><p><strong>内置默认配置</strong>：<code>@vue/cli-service</code> 内部维护了一套功能完备的、针对 Vue 项目优化的默认 Webpack 配置。它已经处理了：</p><ul><li><code>.vue</code> 单文件组件的处理（使用 <code>vue-loader</code>）。</li><li>ES2015+ 语法转换（使用 <code>babel-loader</code>）。</li><li>CSS 处理（支持 <code>PostCSS</code>、<code>Sass</code>、<code>Less</code>、<code>Stylus</code>）。</li><li>静态资源处理（图片、字体等）。</li><li><code>HTMLWebpackPlugin</code> 用于生成 <code>index.html</code>。</li><li>开发环境的 Hot Module Replacement (HMR)。</li></ul></li><li><p><strong>环境特定配置</strong>：根据 <code>NODE_ENV</code> 是 <code>development</code> 还是 <code>production</code>，应用不同的优化策略（如代码分割、压缩、作用域提升等）。</p></li><li><p><strong>插件注入配置</strong>：按照插件的注册顺序，依次执行各个插件的 Service 部分。每个插件都可以通过 <code>api.chainWebpack</code> 来链式修改配置。</p><ul><li>例如，<code>@vue/cli-plugin-pwa</code> 会注入 <code>WorkboxWebpackPlugin</code>。</li></ul></li><li><p><strong>用户自定义配置（<code>vue.config.js</code>）</strong>：最后，读取项目根目录下的 <code>vue.config.js</code> 文件。用户在这里的 <code>chainWebpack</code> 或 <code>configureWebpack</code> 选项拥有<strong>最高优先级</strong>，可以覆盖前面所有步骤的配置。</p></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// vue.config.js 示例</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  chainWebpack</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> config</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用 webpack-chain 语法修改配置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;My App&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  configureWebpack</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 或者使用原生的 Webpack 配置对象语法进行合并</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-开发环境与生产环境构建" tabindex="-1"><a class="header-anchor" href="#_4-开发环境与生产环境构建"><span>4. 开发环境与生产环境构建</span></a></h3><p><strong>开发环境 (<code>vue-cli-service serve</code>)</strong>：</p><ol><li><strong>启动 Dev Server</strong>：基于 <code>webpack-dev-server</code> 启动一个本地开发服务器。</li><li><strong>编译与 HMR</strong>： <ul><li>在内存中快速编译项目（通常不写入磁盘）。</li><li>集成 <strong>Hot Module Replacement</strong>，这是开发体验的关键。Vue CLI 通过 <code>vue-loader</code> 为 Vue 组件提供了开箱即用的 HMR 支持，修改组件后状态得以保留。</li></ul></li><li><strong>代理与错误覆盖</strong>：支持配置 API 代理，解决跨域问题。并在浏览器中显示编译错误和警告。</li></ol><p><strong>生产环境 (<code>vue-cli-service build</code>)</strong>：</p><ol><li><strong>资源编译与优化</strong>： <ul><li>启动 Webpack 在生产模式下进行编译。</li><li><strong>代码分割</strong>：自动将 <code>node_modules</code> 中的依赖提取到 <code>chunk-vendors</code>，并支持动态 <code>import()</code> 语法进行异步组件分割。</li><li><strong>资源压缩</strong>：使用 <code>TerserWebpackPlugin</code> 压缩 JS，<code>CssMinimizerWebpackPlugin</code> 压缩 CSS，并对图片等资源进行优化。</li><li><strong>生成报告</strong>：可以通过 <code>--report</code> 参数生成 Bundle Analyzer 报告，用于分析打包体积。</li></ul></li></ol><hr><h3 id="_5-与-vite-的对比" tabindex="-1"><a class="header-anchor" href="#_5-与-vite-的对比"><span>5. 与 Vite 的对比</span></a></h3><p>虽然 Vue CLI 非常强大，但它的底层基于 Webpack，而 Webpack 的<strong>打包器（Bundler）</strong> 本质决定了其在大型项目上<strong>启动和热更新速度</strong>的瓶颈。</p><p><strong>Vite</strong> 的出现解决了这个问题，其原理是：</p><ul><li><strong>基于原生 ES Modules</strong>：在开发环境下，Vite 不打包代码，而是让浏览器直接请求源码，通过 Koa 服务器按需编译和返回。</li><li><strong>依赖预构建</strong>：使用 Esbuild（Go 编写，比 JS 快 10-100 倍）来预构建 <code>node_modules</code> 中的依赖。</li></ul><p><strong>Vue CLI 的核心价值与总结</strong>：</p><ul><li><strong>它是一个时代的标杆</strong>：在 Vite 出现之前，Vue CLI 提供了最完善、最稳定、最“零配置”的 Vue 项目开发体验，将复杂的 Webpack 配置完全封装。</li><li><strong>其核心原理是“配置聚合与抽象”</strong>：通过<strong>预设、插件系统和 <code>webpack-chain</code></strong>，它将散乱的 Webpack 配置变得有序、可管理和可扩展。</li><li><strong>它是一个功能完整的解决方案</strong>：从项目脚手架、开发服务器、生产构建到代码规范（ESLint）、单元测试（Jest），它提供了一站式的支持。</li><li><strong>现状</strong>：对于新项目，官方更推荐使用基于 Vite 的 <code>create-vue</code>。但 Vue CLI 由于其稳定性和生态成熟度，在未来一段时间内仍将是许多现有项目的首选。</li></ul><hr><p><strong>总结</strong>，一个通过<strong>插件化架构</strong>和 <strong>Webpack 配置链</strong>，将复杂的构建流程抽象成简单命令和配置的<strong>项目开发工具平台</strong>。</p>`,38)])])}const d=e(t,[["render",o]]),p=JSON.parse('{"path":"/guide/source-code/VueCli%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html","title":"VueCli 原理分析","lang":"zh-CN","frontmatter":{"description":"VueCli 原理分析 Vue CLI 的本质是一个基于 Webpack 的、针对 Vue.js 项目进行了深度优化的前端构建工具链和项目脚手架。它的核心目标是为开发者提供开箱即用、可配置、可扩展的现代化开发体验。 架构设计与核心模块 命令执行流程与插件系统 Webpack 配置的生成与管理 开发环境与生产环境构建 与 Vite 的对比（理解其时代定位...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VueCli 原理分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/source-code/VueCli%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"VueCli 原理分析"}],["meta",{"property":"og:description","content":"VueCli 原理分析 Vue CLI 的本质是一个基于 Webpack 的、针对 Vue.js 项目进行了深度优化的前端构建工具链和项目脚手架。它的核心目标是为开发者提供开箱即用、可配置、可扩展的现代化开发体验。 架构设计与核心模块 命令执行流程与插件系统 Webpack 配置的生成与管理 开发环境与生产环境构建 与 Vite 的对比（理解其时代定位..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":6.61,"words":1982},"filePathRelative":"guide/source-code/VueCli原理分析.md","autoDesc":true}');export{d as comp,p as data};
