import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as t}from"./app-D1Bmfn99.js";const l={};function e(h,s){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="uri" tabindex="-1"><a class="header-anchor" href="#uri"><span>URI</span></a></h1><p>URI（统一资源标识符）是一个在 Web 开发和网络编程中非常基础且核心的概念。它不仅仅是“网址”，而是一个更广义的抽象。</p><hr><h3 id="_1-核心定义" tabindex="-1"><a class="header-anchor" href="#_1-核心定义"><span>1. 核心定义</span></a></h3><p><strong>URI</strong> 代表 <strong>统一资源标识符</strong>。</p><ul><li><strong>统一：</strong> 它有统一的格式和规则，允许不同类型的资源标识符在同一个上下文中使用。</li><li><strong>资源：</strong> 可以是任何有身份的东西，如网页、图片、文档、服务，甚至是一个抽象的概念。</li><li><strong>标识符：</strong> 用于区分不同资源的字符串。</li></ul><p><strong>通俗理解：</strong> URI 是互联网上资源的“身份证号”或“唯一地址”。它告诉我们一个资源是什么，以及在哪里可以找到它。</p><hr><h3 id="_2-uri-的组成结构" tabindex="-1"><a class="header-anchor" href="#_2-uri-的组成结构"><span>2. URI 的组成结构</span></a></h3><p>一个完整的 URI 由多个组件组成，以下是其标准格式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>  scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</span></span>
<span class="line"><span>  |______|  |_____________________________||______| |____| |_______|</span></span>
<span class="line"><span>     |                  |                    |        |       |</span></span>
<span class="line"><span>   方案       权限（认证信息+服务器地址）     路径     查询字符串  片段</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>https://john:doe@www.example.com:8080/products/index.html?category=electronics&amp;page=2#reviews</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="a-方案-协议" tabindex="-1"><a class="header-anchor" href="#a-方案-协议"><span>a) 方案 / 协议</span></a></h4><ul><li><strong>定义：</strong> 指定访问资源所使用的协议。</li><li><strong>示例：</strong> <code>https:</code>, <code>http:</code>, <code>ftp:</code>, <code>mailto:</code>, <code>file:</code>, <code>data:</code></li><li><strong>作用：</strong> 告诉客户端（如浏览器）应该使用哪种“语言”与服务器通信。</li></ul><h4 id="b-权限" tabindex="-1"><a class="header-anchor" href="#b-权限"><span>b) 权限</span></a></h4><p>权限部分提供了关于资源所在主机的信息，它本身又包含几个子部分：</p><ul><li><p><strong>用户信息：</strong> <code>john:doe@</code></p><ul><li>可选的认证信息（用户名和密码）。<strong>由于安全原因，在现代 Web 中已不推荐使用。</strong></li></ul></li><li><p><strong>主机：</strong> <code>www.example.com</code></p><ul><li>资源所在服务器的域名或 IP 地址。</li></ul></li><li><p><strong>端口：</strong> <code>:8080</code></p><ul><li>服务器上用于连接的特定端口号。如果使用协议的默认端口（如 HTTP 的 80，HTTPS 的 443），则可以省略。</li></ul></li></ul><h4 id="c-路径" tabindex="-1"><a class="header-anchor" href="#c-路径"><span>c) 路径</span></a></h4><ul><li><strong>定义：</strong> <code>&#39;/products/index.html&#39;</code></li><li><strong>作用：</strong> 表示资源在服务器上的具体位置，类似于文件系统路径。它通常对应着服务器上的一个文件或一个可处理的端点。</li></ul><h4 id="d-查询字符串" tabindex="-1"><a class="header-anchor" href="#d-查询字符串"><span>d) 查询字符串</span></a></h4><ul><li><strong>定义：</strong> <code>&#39;?category=electronics&amp;page=2&#39;</code></li><li><strong>格式：</strong> 以问号 <code>?</code> 开头，包含一个或多个 <code>key=value</code> 对，不同键值对之间用 <code>&amp;</code> 分隔。</li><li><strong>作用：</strong> 向服务器传递额外的参数，用于过滤、搜索、分页等。例如，这里的参数告诉服务器：“我想要电子产品类别下的第 2 页数据”。</li></ul><h4 id="e-片段" tabindex="-1"><a class="header-anchor" href="#e-片段"><span>e) 片段</span></a></h4><ul><li><strong>定义：</strong> <code>&#39;#reviews&#39;</code></li><li><strong>作用：</strong> 也称为“锚点”，它指向资源内部的某个次级部分。<strong>关键点：</strong> 片段<strong>不会</strong>被发送到服务器，它完全由客户端（浏览器）处理。浏览器会滚动到 ID 为 <code>reviews</code> 的 HTML 元素处。</li></ul><hr><h3 id="_3-uri-vs-url-vs-urn" tabindex="-1"><a class="header-anchor" href="#_3-uri-vs-url-vs-urn"><span>3. URI vs URL vs URN</span></a></h3><ul><li><strong>URI：</strong> 是统称，涵盖所有用于标识资源的字符串。</li><li><strong>URL：</strong> <strong>统一资源定位符</strong>。它不仅是标识，还提供了<strong>定位</strong>（访问）该资源的方法和位置。<strong>几乎所有我们在网上使用的都是 URL。</strong></li><li><strong>URN：</strong> <strong>统一资源名称</strong>。它像一个永久的、与位置无关的“名字”，例如 <code>urn:isbn:0451450523</code> 标识了一本书，但不告诉你从哪里获取它。</li></ul><p><strong>一个简单的类比：</strong></p><ul><li><strong>URI</strong> = “人的身份标识”</li><li><strong>URL</strong> = “人的家庭住址”（告诉你他是谁，并且在哪里找到他）</li><li><strong>URN</strong> = “人的身份证号”（告诉你他是谁，但不告诉你在哪）</li></ul><p><strong>结论：</strong> 所有的 URL 和 URN 都是 URI，但并非所有的 URI 都是 URL 或 URN。在 Web 开发中，我们打交道的基本上都是 URL。</p><hr><h3 id="_4-uri-编码" tabindex="-1"><a class="header-anchor" href="#_4-uri-编码"><span>4. URI 编码</span></a></h3><p>由于 URI 只能使用有限的 ASCII 字符集（出于历史和安全原因），任何超出此范围的字符（如中文、空格、特殊符号）都必须进行编码。</p><h4 id="为什么要编码" tabindex="-1"><a class="header-anchor" href="#为什么要编码"><span>为什么要编码？</span></a></h4><ol><li><strong>保留字符：</strong> 像 <code>:</code>, <code>/</code>, <code>?</code>, <code>#</code>, <code>&amp;</code>, <code>=</code> 等在 URI 中有特殊含义，不能直接出现在非其作用域的地方。</li><li><strong>不安全字符：</strong> 像空格、引号等可能会被网关或传输协议误解和修改。</li><li><strong>非 ASCII 字符：</strong> 如中文。</li></ol><h4 id="如何编码" tabindex="-1"><a class="header-anchor" href="#如何编码"><span>如何编码？</span></a></h4><p>使用 <strong>百分号编码</strong>。格式：<code>%XX</code>，其中 <code>XX</code> 是字符十六进制表示的 ASCII 码。</p><ul><li><strong><code>encodeURI()</code> vs <code>encodeURIComponent()</code></strong><br> 这是前端开发中非常重要的区别。</li></ul><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">编码范围</th><th style="text-align:left;">不编码的字符</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>encodeURI()</code></strong></td><td style="text-align:left;">较少</td><td style="text-align:left;"><code>A-Z a-z 0-9 ; , / ? : @ &amp; = + $ - _ . ! ~ * &#39; ( ) #</code></td><td style="text-align:left;"><strong>编码整个 URI</strong>。它假定输入是一个完整的 URI，因此会保留那些对 URI 结构有意义的字符。</td></tr><tr><td style="text-align:left;"><strong><code>encodeURIComponent()</code></strong></td><td style="text-align:left;">较多</td><td style="text-align:left;"><code>A-Z a-z 0-9 - _ . ! ~ * &#39; ( )</code></td><td style="text-align:left;"><strong>编码 URI 的组成部分</strong>（如查询参数的值）。因为它会编码更多字符，包括 <code>/</code>, <code>:</code>, <code>?</code> 等，所以可以安全地放入查询字符串中。</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> fullUri</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;https://example.com/产品目录?name=张三&amp;age=20&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> paramValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&amp;age=30&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个值里包含一个&amp;，会破坏查询字符串结构</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encodeURI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fullUri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;https://example.com/%E4%BA%A7%E5%93%81%E7%9B%AE%E5%BD%95?name=%E5%BC%A0%E4%B8%89&amp;age=20&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 注意：它编码了中文路径，但没有编码 \`?\`, \`=\`, \`&amp;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encodeURIComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">paramValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;%E5%BC%A0%E4%B8%89%26age%3D30&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 注意：它编码了中文，也编码了 \`&amp;\` 和 \`=\`，这样它就可以安全地作为参数值使用了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 正确构建带参数的 URL</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> baseUrl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;https://example.com/search&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> query</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue &amp; react&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> safeUrl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">baseUrl</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">?q=</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encodeURIComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 结果: &quot;https://example.com/search?q=vue%20%26%20react&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果不用 encodeURIComponent，URL 会变成 \`...?q=vue &amp; react\`，这会被解析为两个参数 \`q=vue\` 和 \`react=\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的解码函数是 <code>decodeURI()</code> 和 <code>decodeURIComponent()</code>。</p><hr><h3 id="_5-在前端开发中的应用" tabindex="-1"><a class="header-anchor" href="#_5-在前端开发中的应用"><span>5. 在前端开发中的应用</span></a></h3><ol><li><strong>API 调用：</strong> 使用 <code>fetch</code> 或 <code>axios</code> 时，需要正确构建请求的 URL 和查询参数。</li><li><strong>路由：</strong> 在单页应用中，Vue Router 和 React Router 等库管理着 URL 路径和查询参数，与组件状态同步。</li><li><strong>页面间传参：</strong> 通过 URL 的查询字符串或片段在不同页面间传递简单数据。</li><li><strong>资源引用：</strong> 在 HTML 或 CSS 中引用图片、脚本、样式表等静态资源。</li><li><strong><code>window.location</code> 对象：</strong> 用于获取和操作当前页面的 URL。<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当前 URL: https://example.com:8080/path?name=value#section</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 完整 URL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;https:&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;example.com:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hostname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pathname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;/path&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;?name=value&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;#section&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>URL API：</strong> 现代浏览器提供了 <code>URL</code> 构造函数，可以更方便地解析和构建 URL。<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://example.com/path?name=value#section&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">searchParams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;name&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">searchParams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;page&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;https://example.com/path?name=value&amp;page=2#section&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>URI 是 Web 的基石，它提供了一个标准化的方式来定位和识别网络上的任何资源。</p>`,46)])])}const r=i(l,[["render",e]]),d=JSON.parse('{"path":"/guide/language/Js/URI.html","title":"URI","lang":"zh-CN","frontmatter":{"description":"URI URI（统一资源标识符）是一个在 Web 开发和网络编程中非常基础且核心的概念。它不仅仅是“网址”，而是一个更广义的抽象。 1. 核心定义 URI 代表 统一资源标识符。 统一： 它有统一的格式和规则，允许不同类型的资源标识符在同一个上下文中使用。 资源： 可以是任何有身份的东西，如网页、图片、文档、服务，甚至是一个抽象的概念。 标识符： 用于...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"URI\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/language/Js/URI.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"URI"}],["meta",{"property":"og:description","content":"URI URI（统一资源标识符）是一个在 Web 开发和网络编程中非常基础且核心的概念。它不仅仅是“网址”，而是一个更广义的抽象。 1. 核心定义 URI 代表 统一资源标识符。 统一： 它有统一的格式和规则，允许不同类型的资源标识符在同一个上下文中使用。 资源： 可以是任何有身份的东西，如网页、图片、文档、服务，甚至是一个抽象的概念。 标识符： 用于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.43,"words":1629},"filePathRelative":"guide/language/Js/URI.md","autoDesc":true}');export{r as comp,d as data};
