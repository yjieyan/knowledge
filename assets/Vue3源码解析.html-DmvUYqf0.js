import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,o as t}from"./app-CsaDuvcp.js";const n={};function l(h,i){return t(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="vue3-源码解析" tabindex="-1"><a class="header-anchor" href="#vue3-源码解析"><span>Vue3 源码解析</span></a></h1><hr><h3 id="一、-核心架构与-monorepo-结构" tabindex="-1"><a class="header-anchor" href="#一、-核心架构与-monorepo-结构"><span>一、 核心架构与 Monorepo 结构</span></a></h3><p>Vue 3 的源码采用 <strong>Monorepo</strong> 结构进行管理，使用 <strong>pnpm workspace</strong> 实现。这使得代码组织非常清晰，各模块职责分明。</p><ul><li><strong><code>packages/</code></strong> 目录下包含了所有独立的包： <ul><li><strong><code>reactivity</code></strong>: <strong>响应式系统</strong>，独立的库，可与任何框架配合使用。</li><li><strong><code>runtime-core</code></strong>: <strong>与平台无关的运行时核心</strong>。实现组件创建、渲染、更新、VNode Diff 等核心逻辑。</li><li><strong><code>runtime-dom</code></strong>: <strong>针对浏览器的运行时</strong>。包装了 <code>runtime-core</code>，添加了 DOM 特有的 API（如 <code>document.createElement</code>）。</li><li><strong><code>compiler-core</code></strong>: <strong>与平台无关的编译器核心</strong>。实现模板解析、转换、代码生成的核心逻辑。</li><li><strong><code>compiler-dom</code></strong>: <strong>针对浏览器的编译器</strong>。扩展了 <code>compiler-core</code>，增加了对 HTML 特性和浏览器特有行为的处理。</li><li><strong><code>vue</code></strong>: <strong>面向用户的完整版本</strong>。引用了 <code>runtime-dom</code> 和 <code>compiler-dom</code>，并将其导出。</li></ul></li></ul><p>这种架构实现了 <strong>出色的分层和模块化</strong>。例如，你可以单独使用 <code>@vue/reactivity</code> 库，而不需要引入整个 Vue。</p><hr><h3 id="二、-响应式系统-reactivity-system-packages-reactivity" tabindex="-1"><a class="header-anchor" href="#二、-响应式系统-reactivity-system-packages-reactivity"><span>二、 响应式系统 (Reactivity System) - <code>packages/reactivity</code></span></a></h3><p>这是 Vue 3 性能飞跃和功能强大的基石，从 Vue 2 的 <code>Object.defineProperty</code> 全面转向 <strong><code>Proxy</code></strong>。</p><h4 id="_1-核心-api-ref-和-reactive" tabindex="-1"><a class="header-anchor" href="#_1-核心-api-ref-和-reactive"><span>1. 核心 API：<code>ref</code> 和 <code>reactive</code></span></a></h4><ul><li><p><strong><code>reactive</code></strong>:</p><ul><li>用于创建对象的深度响应式代理。</li><li><strong>核心原理</strong>：内部使用 <code>new Proxy(target, baseHandlers)</code>。<code>baseHandlers</code> 包含了 <code>get</code>、<code>set</code>、<code>deleteProperty</code> 等陷阱（trap）。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 简化版原理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reactive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> proxy</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      track</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 依赖收集</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reactive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 深度响应化</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> oldValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">receiver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">oldValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 触发更新</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>ref</code></strong>:</p><ul><li>用于包装原始值（如 <code>number</code>, <code>string</code>）或任何值，使其成为响应式。</li><li><strong>核心原理</strong>：创建一个具有 <code>value</code> 属性的普通对象。对 <code>.value</code> 的访问通过类的 <code>getter/setter</code> 进行拦截。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 简化版原理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RefImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">  get</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    track</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;value&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 依赖收集</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">  set</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">newVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">newVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> newVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;value&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 触发更新</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RefImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-依赖收集-track-与触发更新-trigger" tabindex="-1"><a class="header-anchor" href="#_2-依赖收集-track-与触发更新-trigger"><span>2. 依赖收集 (Track) 与触发更新 (Trigger)</span></a></h4><p>这是响应式系统的“神经中枢”。</p><ul><li><p><strong><code>targetMap</code> (WeakMap)</strong>:</p><ul><li>全局的依赖存储结构。</li><li>结构：<code>WeakMap&lt;target, Map&lt;key, Set&lt;ReactiveEffect&gt;&gt;&gt;</code></li><li><code>WeakMap</code> 的键是原始对象 <code>target</code>，值是一个 <code>Map</code>。</li><li>内层 <code>Map</code> 的键是 <code>target</code> 的属性 <code>key</code>，值是一个 <code>Set</code>，里面存储了所有依赖于这个 <code>key</code> 的 <strong>副作用函数 (ReactiveEffect)</strong>。</li></ul></li><li><p><strong><code>track(target, key)</code></strong>:</p><ul><li>在 <code>get</code> 操作中调用。</li><li>它的作用就是：找到当前正在运行的副作用函数（<code>activeEffect</code>），然后把它添加到 <code>targetMap[target][key]</code> 对应的 <code>Set</code> 中。简单说就是 <strong>“记录下谁用了我这个属性”</strong>。</li></ul></li><li><p><strong><code>trigger(target, key)</code></strong>:</p><ul><li>在 <code>set</code> 操作中调用。</li><li>它的作用是：从 <code>targetMap</code> 中找到 <code>target[key]</code> 对应的所有副作用函数 <code>effects</code>，然后 <strong>依次执行它们</strong>。简单说就是 <strong>“通知所有用到这个属性的人，我变了！”</strong>。</li></ul></li><li><p><strong><code>ReactiveEffect</code> 类</strong>:</p><ul><li>这是一个包装类，代表一个可执行的副作用函数（如组件的渲染函数、<code>computed</code>、<code>watch</code>）。</li><li>它有一个 <code>run</code> 方法，执行时会将自身设置为 <code>activeEffect</code>，然后执行原始函数。这样，在函数执行期间访问到的响应式属性，就能通过 <code>getter</code> 中的 <code>track</code> 正确地收集到这个 <code>effect</code> 作为依赖。</li></ul></li></ul><hr><h3 id="三、-编译与渲染-compiler-renderer-packages-compiler-与-packages-runtime" tabindex="-1"><a class="header-anchor" href="#三、-编译与渲染-compiler-renderer-packages-compiler-与-packages-runtime"><span>三、 编译与渲染 (Compiler &amp; Renderer) - <code>packages/compiler-*</code> 与 <code>packages/runtime-*</code></span></a></h3><h4 id="_1-模板编译-compiler-core" tabindex="-1"><a class="header-anchor" href="#_1-模板编译-compiler-core"><span>1. 模板编译 (<code>compiler-core</code>)</span></a></h4><p>Vue 的模板编译器是一个 <strong>编译器</strong>，它将 HTML 字符串模板编译为 <strong>渲染函数 (render function)</strong>。这个过程分为三步：</p><ol><li><p><strong>解析 (Parse)</strong>：</p><ul><li>使用一个 <strong>有限状态机</strong> 和大量的正则表达式，将模板字符串解析成一个 <strong>抽象语法树 (AST)</strong>。</li><li>AST 是一个 JSON 对象，它精确地描述了模板的语法结构（如元素、属性、文本、插值表达式 <code>{{ }}</code>、指令等）。</li></ul></li><li><p><strong>转换 (Transform)</strong>：</p><ul><li>遍历 AST，并对其进行修改。这是 Vue 3 性能优化的关键一步。</li><li><strong>Patch Flags (补丁标志)</strong>：编译器会智能地分析动态绑定，并为动态节点打上不同的“标志”。例如： <ul><li><code>1 /* TEXT */</code>：只有文本内容是动态的。</li><li><code>8 /* PROPS */</code>：只有 props 是动态的。</li></ul></li><li>这样在运行时，Diff 算法可以跳过静态内容的对比，直接定位到动态部分，极大提升性能。</li><li><strong>Hoist Static</strong>：将纯静态的节点提升到渲染函数之外，只在应用初始化时创建一次，之后每次渲染复用。</li></ul></li><li><p><strong>生成代码 (Code Generate)</strong>：</p><ul><li>将优化后的 AST 转换为可执行的 JavaScript 代码字符串，即渲染函数的代码。</li><li>例如，一个简单的模板 <code>&lt;div&gt;{{ msg }}&lt;/div&gt;</code> 会被编译成：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">createElementVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _createElementVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">toDisplayString</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _toDisplayString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">openBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _openBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">createElementBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _createElementBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vue&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">_ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">_cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_openBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_createElementBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;div&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_toDisplayString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">_ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* TEXT */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意最后的 <code>1 /* TEXT */</code>，这就是 <strong>Patch Flag</strong>。</li></ul></li></ol><h4 id="_2-运行时渲染器-runtime-core" tabindex="-1"><a class="header-anchor" href="#_2-运行时渲染器-runtime-core"><span>2. 运行时渲染器 (<code>runtime-core</code>)</span></a></h4><p>渲染器接收编译产生的 <strong>虚拟 DOM (VNode)</strong> 树，并将其转换为真实的 DOM。它的核心是 <code>patch</code> 函数。</p><ul><li><strong><code>patch(oldVNode, newVNode, container)</code></strong>: <ul><li>比较新旧 VNode，找出差异，并高效地更新真实 DOM。</li><li><strong>过程</strong>： <ol><li><strong>判断节点类型</strong>：如果新旧 VNode 类型不同（如从 <code>div</code> 变为 <code>span</code>），则直接卸载旧节点，挂载新节点。</li><li><strong>精细化比较</strong>：如果类型相同，则进入更细致的比较（<code>patchElement</code>）。 <ul><li><strong>更新属性</strong>：比较 <code>props</code> 的差异并更新。得益于 <strong>Patch Flags</strong>，如果标志是 <code>TEXT</code>，这里会跳过对 <code>class</code>, <code>style</code> 等属性的比较。</li><li><strong>更新子节点</strong>：这是 Diff 算法的核心。Vue 3 使用了 <strong>快速 Diff 算法</strong>，其核心步骤是：<br> a. <strong>从头同步</strong>：从头部开始，遇到相同节点则 patch，直到不同。<br> b. <strong>从尾同步</strong>：从尾部开始，遇到相同节点则 patch，直到不同。<br> c. <strong>处理剩余节点</strong>： <ul><li>如果新节点有剩余，老节点没剩余，则 <strong>新增</strong>。</li><li>如果老节点有剩余，新节点没剩余，则 <strong>卸载</strong>。</li><li>最复杂的情况：顺序未知。这里会利用 <strong><code>key</code></strong> 建立一个 <code>keyToNewIndexMap</code>，然后求出最长递增子序列，以此来最小化移动 DOM 的次数。</li></ul></li></ul></li></ol></li></ul></li></ul><hr><h3 id="四、-组合式-api-composition-api-的实现" tabindex="-1"><a class="header-anchor" href="#四、-组合式-api-composition-api-的实现"><span>四、 组合式 API (Composition API) 的实现</span></a></h3><p>组合式 API 本质上是 <strong>在 <code>setup</code> 函数中运行的普通 JavaScript 函数</strong>。</p><ul><li><p><strong><code>setup</code> 函数</strong>：</p><ul><li>在组件实例创建完成后、挂载之前执行。</li><li>它接收 <code>props</code> 和 <code>context</code> 参数。</li><li>它的返回值会被暴露给模板和组件的其他选项（如 <code>methods</code>）。</li></ul></li><li><p><strong>生命周期钩子的注入</strong>：</p><ul><li><code>onMounted</code>, <code>onUpdated</code> 等函数，内部原理是向当前组件实例（通过 <code>getCurrentInstance()</code> 获取）内部的一个队列里注入一个回调函数。</li><li>当组件运行到相应的生命周期时（如在 <code>mounted</code> 时），就会执行这个队列里所有的回调。</li></ul></li><li><p><strong>响应式数据的连接</strong>：</p><ul><li>在 <code>setup</code> 中定义的 <code>ref</code> 或 <code>reactive</code> 变量，其依赖收集发生在渲染函数执行期间。</li><li>当组件的渲染函数（由模板编译而来）执行时，会读取这些响应式变量，从而触发 <code>getter</code>，将 <strong>当前组件的渲染 Effect</strong>（一个 <code>ReactiveEffect</code> 实例）收集为依赖。</li><li>当这些变量变化时，会触发这个渲染 Effect 重新执行，即重新渲染。</li></ul></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Vue 3 的源码是一个设计精良的系统工程：</p><ol><li><strong>模块化</strong>：通过 Monorepo 将响应式、编译、运行时彻底解耦，职责清晰。</li><li><strong>响应式</strong>：基于 <code>Proxy</code> 的重写，性能更强、功能更完善，并独立成库。</li><li><strong>编译优化</strong>：通过 <strong>Patch Flags</strong> 和 <strong>静态提升</strong> 等策略，将性能优化工作从运行时提前到编译时，为快速的运行时 Diff 打下基础。</li><li><strong>运行时</strong>：利用编译时的提示，实现了高效的 <strong>快速 Diff 算法</strong>。</li><li><strong>组合式 API</strong>：提供了一种更灵活的代码组织方式，其本身是建立在强大的响应式系统和组件实例生命周期之上的。</li></ol>`,29)])])}const r=s(n,[["render",l]]),d=JSON.parse('{"path":"/guide/source-code/Vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"Vue3 源码解析","lang":"zh-CN","frontmatter":{"description":"Vue3 源码解析 一、 核心架构与 Monorepo 结构 Vue 3 的源码采用 Monorepo 结构进行管理，使用 pnpm workspace 实现。这使得代码组织非常清晰，各模块职责分明。 packages/ 目录下包含了所有独立的包： reactivity: 响应式系统，独立的库，可与任何框架配合使用。 runtime-core: 与平台...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3 源码解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-17T12:42:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/source-code/Vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Vue3 源码解析"}],["meta",{"property":"og:description","content":"Vue3 源码解析 一、 核心架构与 Monorepo 结构 Vue 3 的源码采用 Monorepo 结构进行管理，使用 pnpm workspace 实现。这使得代码组织非常清晰，各模块职责分明。 packages/ 目录下包含了所有独立的包： reactivity: 响应式系统，独立的库，可与任何框架配合使用。 runtime-core: 与平台..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T12:42:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T12:42:22.000Z"}]]},"git":{"createdTime":1760704942000,"updatedTime":1760704942000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":6.68,"words":2003},"filePathRelative":"guide/source-code/Vue3源码解析.md","autoDesc":true}');export{r as comp,d as data};
