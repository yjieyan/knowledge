import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,o as n}from"./app-C49dgTjO.js";const t={};function l(r,i){return n(),a("div",null,[...i[0]||(i[0]=[e(`<p>这两个命令/工具是网络调试和抓包分析中非常经典和强大的手段，它们分别工作在 <strong>应用层</strong> 和 <strong>网络层</strong>，可以结合起来解决复杂的网络问题。</p><hr><h3 id="一、-curl-h-应用层的手动请求构造" tabindex="-1"><a class="header-anchor" href="#一、-curl-h-应用层的手动请求构造"><span>一、 <code>curl -H</code>：应用层的手动请求构造</span></a></h3><p><code>curl</code> 是一个命令行工具和库，用于使用各种协议（如 HTTP、HTTPS）传输数据。<code>-H</code> 参数是其最常用的选项之一。</p><h4 id="_1-核心功能-h-或-header" tabindex="-1"><a class="header-anchor" href="#_1-核心功能-h-或-header"><span>1. 核心功能：<code>-H</code> 或 <code>--header</code></span></a></h4><ul><li><strong>作用</strong>：用于向 HTTP 请求中添加或覆盖自定义的请求头。</li><li><strong>语法</strong>：<code>curl -H &quot;Header-Name: Header-Value&quot; [URL]</code></li><li><strong>本质</strong>：它允许你以<strong>编程方式</strong>，精确地控制一个 HTTP 请求的所有细节，模拟浏览器、移动应用或任何客户端的行为。</li></ul><h4 id="_2-关键用途与场景" tabindex="-1"><a class="header-anchor" href="#_2-关键用途与场景"><span>2. 关键用途与场景</span></a></h4><ol><li><p><strong>模拟特定客户端</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 模拟手机浏览器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 模拟 AJAX 请求 (XHR)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;X-Requested-With: XMLHttpRequest&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://api.example.com/data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>API 调试与认证</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 携带 Bearer Token 访问受保护的 API</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJ...&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://api.example.com/protected</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 发送 JSON 数据 (通常需要同时指定 Content-Type)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Accept: application/json&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> POST</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{&quot;username&quot;:&quot;foo&quot;,&quot;password&quot;:&quot;bar&quot;}&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     https://api.example.com/login</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>测试缓存与条件请求</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 测试文件是否被修改，如果未修改则返回 304</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://example.com/static/logo.png</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 Etag 进行验证</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;If-None-Match: &quot;abc123&quot;&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://example.com/resource</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>调试与故障排除</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 强制指定 Host 头，用于测试虚拟主机或负载均衡</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Host: staging.example.com&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://192.168.1.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 覆盖 Referer</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Referer: https://google.com&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>总结</strong>：<code>curl -H</code> 是前端和后端开发者<strong>手动测试和调试 HTTP 接口、验证服务端逻辑、重现特定请求场景的利器</strong>。它工作在协议的应用层，让你能“看到”和“控制”请求的明文内容。</p><hr><h3 id="二、-wireshark-过滤-tcp-port-443-网络层的流量洞察" tabindex="-1"><a class="header-anchor" href="#二、-wireshark-过滤-tcp-port-443-网络层的流量洞察"><span>二、 Wireshark 过滤 <code>tcp.port == 443</code>：网络层的流量洞察</span></a></h3><p>Wireshark 是世界上最广泛使用的网络协议分析器。它工作在<strong>网络层和数据链路层</strong>，可以捕获和分析流经网卡的原始数据包。</p><h4 id="_1-核心功能-抓包与过滤" tabindex="-1"><a class="header-anchor" href="#_1-核心功能-抓包与过滤"><span>1. 核心功能：抓包与过滤</span></a></h4><ul><li><strong>抓包</strong>：将网卡设置为“混杂模式”，记录所有经过的网络流量。</li><li><strong>过滤</strong>：由于流量数据极其庞大，过滤是使用 Wireshark 的核心技能。它允许你只显示你关心的数据包。</li></ul><h4 id="_2-过滤表达式-tcp-port-443" tabindex="-1"><a class="header-anchor" href="#_2-过滤表达式-tcp-port-443"><span>2. 过滤表达式：<code>tcp.port == 443</code></span></a></h4><ul><li><strong>含义</strong>：这个过滤器会<strong>只显示所有 TCP 协议中，源端口或目标端口为 443 的数据包</strong>。</li><li><strong>为什么是 443 端口？</strong> 因为 <strong>443 是 HTTPS 协议的默认端口</strong>。所以，这个过滤器实际上是在说：“<strong>只给我看所有 HTTPS 的流量。</strong>”</li></ul><h4 id="_3-关键用途与场景" tabindex="-1"><a class="header-anchor" href="#_3-关键用途与场景"><span>3. 关键用途与场景</span></a></h4><p>当你使用这个过滤器时，你正在深入观察加密的通信。虽然你看不到应用层的明文（如 HTTP 请求头、Cookie），但你可以看到大量其他有价值的信息：</p><ol><li><p><strong>分析 TLS/SSL 握手过程</strong></p><ul><li>你可以清晰地看到 <strong>Client Hello</strong>, <strong>Server Hello</strong>, <strong>Certificate</strong>, <strong>Server Key Exchange</strong>, <strong>Client Key Exchange</strong> 等步骤。</li><li>你可以验证 TLS 版本、加密套件是否安全。</li><li>你可以测量 TLS 握手带来的延迟（消耗了几个 RTT）。</li></ul></li><li><p><strong>诊断连接问题</strong></p><ul><li>你可以看到 TCP 连接是否成功建立（三次握手）。</li><li>连接是否被重置（<code>[RST]</code> 包）。</li><li>是否存在大量的重传（<code>[TCP Retransmission]</code>），这暗示了网络不稳定或拥塞。</li></ul></li><li><p><strong>评估性能</strong></p><ul><li>通过观察 <strong>TLS 握手完成</strong> 到 <strong>应用数据开始传输</strong> 之间的时间，可以评估服务器处理请求的速度。</li><li>可以查看 TCP 窗口大小，判断是否存在流量控制问题。</li></ul></li><li><p><strong>确认通信端点</strong></p><ul><li>即使内容加密，你也可以看到你的客户端正在与哪个服务器的 IP 地址通信，这对于排查错误的 DNS 解析或路由问题非常有帮助。</li></ul></li></ol><h4 id="_4-进阶-解密-https-流量" tabindex="-1"><a class="header-anchor" href="#_4-进阶-解密-https-流量"><span>4. 进阶：解密 HTTPS 流量</span></a></h4><p>Wireshark 有一个高级功能：<strong>如果你拥有服务器的私钥</strong>，或者浏览器设置了 <code>SSLKEYLOGFILE</code> 环境变量，你可以将这些密钥配置到 Wireshark 中。配置成功后，Wireshark 就能<strong>解密 HTTPS 流量</strong>，让你像查看 HTTP 一样，直接看到请求头、响应体等明文内容。这是开发调试的“终极武器”。</p><hr><h3 id="三、-协同使用-从现象到根源" tabindex="-1"><a class="header-anchor" href="#三、-协同使用-从现象到根源"><span>三、 协同使用：从现象到根源</span></a></h3><p>想象一个场景：你在浏览器中访问 <code>https://api.example.com</code> 时遇到了一个奇怪的错误。</p><ol><li><p><strong>第一步：用 <code>curl</code> 重现和简化问题</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Authorization: Bearer your-token&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     https://api.example.com/endpoint</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果 <code>curl</code> 也复现了同样的问题（如返回 500 错误），说明问题不在浏览器环境，而是请求本身或服务器。</li><li><code>-v</code> 参数可以让你看到详细的 HTTP 请求和响应头，这通常是解决问题的第一步。</li></ul></li><li><p><strong>第二步：用 Wireshark 深入探查</strong></p><ul><li>如果 <code>curl</code> 的日志信息不足以定位问题（例如，连接超时、TLS 握手失败），就需要动用 Wireshark。</li><li>打开 Wireshark，开始抓包，然后再次运行上面的 <code>curl</code> 命令。</li><li>在 Wireshark 中应用过滤器 <code>tcp.port == 443</code>。</li><li>现在，你可以精确地看到： <ul><li>TCP 连接是否成功建立？</li><li>TLS 握手在哪个步骤失败了？</li><li>服务器是否返回了证书？证书是否有效？</li><li>请求发出后，服务器是否有响应？</li></ul></li></ul></li></ol><p>通过这种组合，你可以从“这个 API 调用失败了”的应用层现象，一直追溯到“因为服务器的证书链不完整导致 TLS 握手失败”的网络层根本原因。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong><code>curl -H</code></strong> 是 <strong>应用层调试工具</strong>，用于精确构造和发送 HTTP 请求，<strong>关注的是“什么数据”被发送和接收</strong>。它是开发者的“手术刀”。</li><li><strong>Wireshark <code>tcp.port==443</code></strong> 是 <strong>网络层分析工具</strong>，用于捕获和分析原始的加密流量，<strong>关注的是“数据如何”在网络中传输</strong>。它是网络工程师的“X光机”。</li></ul><p>两者一表一里，一明一暗，共同构成了从端到端的完整问题排查能力。掌握它们，意味着你具备了解决复杂网络问题的深度洞察力。</p>`,29)])])}const o=s(t,[["render",l]]),d=JSON.parse('{"path":"/guide/computer/%E7%BD%91%E7%BB%9C/curl-H-wireshark%E8%BF%87%E6%BB%A4tcp.port__443.html","title":"","lang":"zh-CN","frontmatter":{"description":"这两个命令/工具是网络调试和抓包分析中非常经典和强大的手段，它们分别工作在 应用层 和 网络层，可以结合起来解决复杂的网络问题。 一、 curl -H：应用层的手动请求构造 curl 是一个命令行工具和库，用于使用各种协议（如 HTTP、HTTPS）传输数据。-H 参数是其最常用的选项之一。 1. 核心功能：-H 或 --header 作用：用于向 H...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T03:59:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/%E7%BD%91%E7%BB%9C/curl-H-wireshark%E8%BF%87%E6%BB%A4tcp.port__443.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:description","content":"这两个命令/工具是网络调试和抓包分析中非常经典和强大的手段，它们分别工作在 应用层 和 网络层，可以结合起来解决复杂的网络问题。 一、 curl -H：应用层的手动请求构造 curl 是一个命令行工具和库，用于使用各种协议（如 HTTP、HTTPS）传输数据。-H 参数是其最常用的选项之一。 1. 核心功能：-H 或 --header 作用：用于向 H..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T03:59:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T03:59:38.000Z"}]]},"git":{"createdTime":1760716761000,"updatedTime":1760759978000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":2,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.24,"words":1572},"filePathRelative":"guide/computer/网络/curl-H-wireshark过滤tcp.port==443.md","autoDesc":true}');export{o as comp,d as data};
