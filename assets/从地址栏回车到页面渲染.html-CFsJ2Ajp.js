import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as o,o as e}from"./app-BA3ZtvWj.js";const r={};function i(a,s){return e(),n("div",null,[...s[0]||(s[0]=[o(`<h1 id="从地址栏回车到页面渲染" tabindex="-1"><a class="header-anchor" href="#从地址栏回车到页面渲染"><span>从地址栏回车到页面渲染</span></a></h1><p>整个过程可以分为两大阶段：<strong>网络请求阶段</strong> 和 <strong>浏览器渲染阶段</strong>。</p><h3 id="第一阶段-网络请求阶段" tabindex="-1"><a class="header-anchor" href="#第一阶段-网络请求阶段"><span>第一阶段：网络请求阶段</span></a></h3><p>这个阶段的目标是获取到页面的 HTML 资源。</p><h4 id="_1-用户输入-ui-线程处理" tabindex="-1"><a class="header-anchor" href="#_1-用户输入-ui-线程处理"><span>1. 用户输入 &amp; UI 线程处理</span></a></h4><p>用户在地址栏输入 <code>https://www.example.com</code> 并按下回车。</p><ul><li><strong>浏览器 UI 线程</strong> 会判断这是一个 URL 还是搜索查询。</li><li>如果是 URL，则会加上协议（如 <code>https://</code>）组装成完整的 URL。</li></ul><h4 id="_2-dns-解析-domain-name-system" tabindex="-1"><a class="header-anchor" href="#_2-dns-解析-domain-name-system"><span>2. DNS 解析 (Domain Name System)</span></a></h4><p><strong>目标</strong>：将域名 <code>www.example.com</code> 解析为服务器的 IP 地址，如 <code>192.0.2.1</code>。</p><p>这是一个分层查询过程：</p><ol><li><strong>浏览器缓存</strong>：浏览器首先检查自身缓存中是否有该域名的 IP。</li><li><strong>操作系统缓存</strong>：如果浏览器缓存没有，会调用操作系统（如 <code>gethostbyname</code>）查询本地的 <strong>hosts 文件</strong> 和系统缓存。</li><li><strong>路由器缓存</strong>：请求会发往路由器，检查路由器缓存。</li><li><strong>ISP DNS 缓存</strong>：请求到达互联网服务提供商（ISP）的 DNS 服务器，这里通常有大量缓存。</li><li><strong>递归查询</strong>：如果以上都没有，ISP 的 DNS 服务器会开始递归查询： <ul><li>从 <strong>根域名服务器</strong> 开始，询问 <code>.com</code> 域名的服务器地址。</li><li>然后询问 <strong>.com 顶级域名服务器</strong>，询问 <code>example.com</code> 的权威域名服务器地址。</li><li>最后询问 <strong><code>example.com</code> 的权威域名服务器</strong>，获得 <code>www.example.com</code> 的 IP 地址。</li></ul></li></ol><ul><li><strong>DNS 预解析</strong>：现代浏览器会通过 <code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code> 或分析页面中的链接，提前进行 DNS 解析，以提升性能。</li></ul><h4 id="_3-tcp-连接-transmission-control-protocol" tabindex="-1"><a class="header-anchor" href="#_3-tcp-连接-transmission-control-protocol"><span>3. TCP 连接 (Transmission Control Protocol)</span></a></h4><p><strong>目标</strong>：与服务器建立可靠的传输通道。通过 <strong>三次握手</strong> 建立连接。</p><ol><li><strong>SYN</strong>：客户端发送一个 <strong>SYN</strong> (Synchronize Sequence Number) 包到服务器，表示请求建立连接。</li><li><strong>SYN-ACK</strong>：服务器收到后，回复一个 <strong>SYN-ACK</strong> (Acknowledgement) 包，表示同意建立连接。</li><li><strong>ACK</strong>：客户端再回复一个 <strong>ACK</strong> 包。至此，连接建立成功，可以开始传输数据。</li></ol><p><strong>为什么是三次？</strong> 主要是为了<strong>防止已失效的连接请求报文突然又传到了服务器</strong>，从而产生错误。</p><h4 id="_4-tls-握手-transport-layer-security-仅-https" tabindex="-1"><a class="header-anchor" href="#_4-tls-握手-transport-layer-security-仅-https"><span>4. TLS 握手 (Transport Layer Security) - 仅 HTTPS</span></a></h4><p><strong>目标</strong>：建立一个安全的加密通道。对于 HTTPS 连接，在 TCP 连接建立后，需要再进行 TLS 握手。</p><ol><li><strong>ClientHello</strong>：客户端向服务器发送支持的 TLS 版本、加密套件列表、一个随机数。</li><li><strong>ServerHello</strong>：服务器选择 TLS 版本和加密套件，并发送自己的<strong>数字证书</strong>和一个随机数。</li><li><strong>验证证书</strong>：客户端验证证书的合法性（是否由可信机构颁发、域名是否匹配、是否在有效期内）。</li><li><strong>Premaster Secret</strong>：客户端验证通过后，会生成另一个随机数（预主密钥），用证书中的公钥加密后发送给服务器。</li><li><strong>生成会话密钥</strong>：服务器用私钥解密得到预主密钥。此时，客户端和服务器都拥有了三个随机数，它们各自使用相同的算法生成相同的<strong>会话密钥</strong>，用于后续通信的对称加密。</li><li><strong>握手结束</strong>：双方交换加密后的“Finished”消息，验证握手是否成功。</li></ol><h4 id="_5-http-请求-响应-hypertext-transfer-protocol" tabindex="-1"><a class="header-anchor" href="#_5-http-请求-响应-hypertext-transfer-protocol"><span>5. HTTP 请求/响应 (HyperText Transfer Protocol)</span></a></h4><p><strong>目标</strong>：通过已建立的连接，获取页面资源。</p><ol><li><strong>发送 HTTP 请求</strong>：浏览器组装一个 <strong>HTTP 请求报文</strong>。<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET / HTTP/1.1</span></span>
<span class="line"><span>Host: www.example.com</span></span>
<span class="line"><span>User-Agent: Mozilla/5.0...</span></span>
<span class="line"><span>Accept: text/html,application/xhtml+xml...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>服务器处理请求</strong>：服务器接收到请求，根据路径和头部信息，找到对应的资源（或由后端应用动态生成）。</li><li><strong>返回 HTTP 响应</strong>：服务器返回一个 <strong>HTTP 响应报文</strong>。<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Content-Type: text/html; charset=utf-8</span></span>
<span class="line"><span>Content-Length: 1234</span></span>
<span class="line"><span>Cache-Control: public, max-age=3600</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;!DOCTYPE html&gt;&lt;html&gt;...（这里是HTML内容）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>TCP 断开连接</strong>：对于 HTTP/1.1，默认使用 <code>Connection: keep-alive</code>，连接会保持一段时间，以便后续请求复用，避免重复握手。最终数据传送完毕后，通过 <strong>四次挥手</strong> 断开 TCP 连接。</li></ol><hr><h3 id="第二阶段-浏览器渲染阶段" tabindex="-1"><a class="header-anchor" href="#第二阶段-浏览器渲染阶段"><span>第二阶段：浏览器渲染阶段</span></a></h3><p>这个阶段发生在 <strong>浏览器的渲染进程</strong> 中。渲染进程的主线程负责解析和渲染。</p><h4 id="_1-构建-dom-树-document-object-model" tabindex="-1"><a class="header-anchor" href="#_1-构建-dom-树-document-object-model"><span>1. 构建 DOM 树 (Document Object Model)</span></a></h4><p><strong>目标</strong>：将 HTML 文本转换为浏览器能理解的 DOM 树结构。</p><ul><li><strong>过程</strong>： <ol><li><strong>转换</strong>：浏览器读取原始的 HTML 字节数据，并将其转换为指定编码（如 UTF-8）的字符串。</li><li><strong>令牌化</strong>：HTML 解析器将字符串解析成一系列的 <strong>Tokens</strong>（如 <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code> 等开始和结束标签）。</li><li><strong>构建节点</strong>：将这些 Tokens 转换为 <strong>Node</strong> 对象。</li><li><strong>构建 DOM 树</strong>：根据节点的父子关系，构建出一棵 <strong>树形结构</strong> 的 DOM。</li></ol></li><li><strong>关键点</strong>： <ul><li>解析过程是 <strong>自上而下</strong> 的。</li><li>当遇到 <code>&lt;script&gt;</code> 标签（没有 <code>async/defer</code> 属性）时，<strong>会停止 HTML 解析</strong>，先下载并执行 JavaScript。因为 JS 可能会修改 DOM 结构。</li></ul></li></ul><h4 id="_2-构建-cssom-树-css-object-model" tabindex="-1"><a class="header-anchor" href="#_2-构建-cssom-树-css-object-model"><span>2. 构建 CSSOM 树 (CSS Object Model)</span></a></h4><p><strong>目标</strong>：将 CSS 样式表转换为浏览器能理解的 CSSOM 树。</p><ul><li><strong>过程</strong>：与 DOM 构建类似，也是从字节 -&gt; 字符串 -&gt; Tokens -&gt; Nodes -&gt; CSSOM。</li><li><strong>关键点</strong>： <ul><li>CSS 解析是 <strong>渲染阻塞</strong> 的。浏览器必须拥有完整的 CSSOM 才能进入渲染树构建阶段，因为 CSS 规则可以相互覆盖和继承（层叠规则）。</li><li>CSSOM 具有 <strong>层级结构</strong>，子节点会继承父节点的样式。</li></ul></li></ul><h4 id="_3-执行-javascript" tabindex="-1"><a class="header-anchor" href="#_3-执行-javascript"><span>3. 执行 JavaScript</span></a></h4><ul><li>如上所述，<strong>同步的 <code>&lt;script&gt;</code> 标签会阻塞 DOM 构建</strong>。</li><li>如果 JavaScript 试图访问尚未被解析的 DOM 元素，或者尚未构建完成的 CSSOM，可能会出错。</li><li>使用 <code>async</code> 或 <code>defer</code> 属性的脚本可以异步加载和执行，不阻塞解析。</li></ul><h4 id="_4-构建渲染树-render-tree" tabindex="-1"><a class="header-anchor" href="#_4-构建渲染树-render-tree"><span>4. 构建渲染树 (Render Tree)</span></a></h4><p><strong>目标</strong>：将 DOM 和 CSSOM 合并，确定哪些元素需要被渲染以及如何渲染。</p><ul><li><strong>过程</strong>：渲染进程遍历 DOM 树，将 <strong>可见的节点</strong> 及其计算后的样式添加到渲染树中。</li><li><strong>关键点</strong>： <ul><li><strong>不可见元素不会被包含</strong>，例如 <code>display: none</code> 的元素。而 <code>visibility: hidden</code> 的元素仍会占据空间，所以会被包含。</li><li>渲染树只包含与视觉相关的节点。</li></ul></li></ul><h4 id="_5-布局-重排-layout-reflow" tabindex="-1"><a class="header-anchor" href="#_5-布局-重排-layout-reflow"><span>5. 布局 / 重排 (Layout / Reflow)</span></a></h4><p><strong>目标</strong>：计算渲染树中每个节点的精确位置和大小（几何信息）。</p><ul><li><strong>过程</strong>：渲染进程从渲染树的根节点开始遍历，计算每个节点在视口（viewport）内的坐标。这个过程输出一棵 <strong>布局树 (Layout Tree)</strong>。</li><li><strong>输出</strong>：一个详细的“蓝图”，记录了每个元素的 <code>x, y</code> 坐标和 <code>width, height</code> 尺寸。</li><li><strong>性能影响</strong>：这是非常消耗性能的一步。任何可能改变元素几何属性的操作（如改变窗口大小、修改元素的宽高/位置）都会触发 <strong>重排</strong>，而重排必定会触发后续的 <strong>重绘</strong>。</li></ul><h4 id="_6-绘制-栅格化-paint-raster" tabindex="-1"><a class="header-anchor" href="#_6-绘制-栅格化-paint-raster"><span>6. 绘制 / 栅格化 (Paint / Raster)</span></a></h4><p><strong>目标</strong>：将布局树转换为屏幕上的实际像素。</p><ul><li><strong>过程</strong>： <ol><li><strong>绘制 (Paint)</strong>：主线程遍历布局树，生成 <strong>绘制记录 (Paint Records)</strong>。这不是一个一个像素地画，而是一个指令列表，类似于“先画背景，再画边框，再画文本...”。</li><li><strong>分层 (Layerize)</strong>：为了提升性能，主线程会将页面拆分为多个<strong>图层 (Layers)</strong>。某些特定的 CSS 属性（如 <code>will-change</code>、<code>transform</code>、<code>opacity</code>）会提示浏览器将其提升到独立的合成层。</li><li><strong>栅格化 (Raster)</strong>：<strong>合成线程</strong> 将每个图层分解为多个<strong>图块 (Tiles)</strong>，然后将图块交由 <strong>栅格化线程</strong> 处理。栅格化线程使用 <strong>GPU</strong> 将图块转换为<strong>位图</strong>，并存储在 GPU 内存中。这个过程速度极快。</li></ol></li></ul><h4 id="_7-合成与显示-composite-display" tabindex="-1"><a class="header-anchor" href="#_7-合成与显示-composite-display"><span>7. 合成与显示 (Composite &amp; Display)</span></a></h4><p><strong>目标</strong>：将各个图层合成为最终的页面图像并显示在屏幕上。</p><ul><li><strong>过程</strong>： <ol><li>当所有图块都被光栅化后，<strong>合成线程</strong> 会收集称为 <strong>绘制四边形 (Draw Quads)</strong> 的信息（描述了图块在内存中的位置、在页面中的位置等）。</li><li>合成线程将这些信息组合成一个 <strong>合成器帧 (Compositor Frame)</strong>。</li><li>该帧通过 <strong>IPC</strong> 提交给浏览器进程。</li><li>浏览器进程将帧发送给 <strong>GPU</strong>，最终由 GPU 渲染到屏幕上。</li></ol></li></ul><hr><h3 id="总结与性能启示" tabindex="-1"><a class="header-anchor" href="#总结与性能启示"><span>总结与性能启示</span></a></h3><p>从地址栏回车到页面渲染是一个复杂的系统工程，涉及 <strong>网络、操作系统、浏览器内核</strong> 等多个领域的知识。理解这个过程，我们可以得出以下关键的 <strong>性能优化方向</strong>：</p><ol><li><strong>网络层面</strong>：DNS 预解析、减少 HTTP 请求（合并文件、雪碧图）、使用 HTTP/2、开启 Gzip 压缩、利用 CDN 和缓存。</li><li><strong>渲染层面</strong>： <ul><li><strong>优化关键渲染路径</strong>：优先加载关键 CSS（内联）、异步加载非关键 CSS 和 JS（<code>async/defer</code>）。</li><li><strong>避免强制同步布局</strong>：不要在循环中先读样式再写样式。</li><li><strong>减少重绘与重排</strong>：使用 <code>transform</code> 和 <code>opacity</code> 来实现动画，它们由合成线程处理，不触发布局和绘制。</li><li><strong>利用合成层</strong>：对复杂动画使用 <code>will-change: transform;</code> 提升到单独图层。</li></ul></li></ol>`,49)])])}const c=t(r,[["render",i]]),d=JSON.parse('{"path":"/guide/computer/%E7%BD%91%E7%BB%9C/%E4%BB%8E%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%9B%9E%E8%BD%A6%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93.html","title":"从地址栏回车到页面渲染","lang":"zh-CN","frontmatter":{"description":"从地址栏回车到页面渲染 整个过程可以分为两大阶段：网络请求阶段 和 浏览器渲染阶段。 第一阶段：网络请求阶段 这个阶段的目标是获取到页面的 HTML 资源。 1. 用户输入 & UI 线程处理 用户在地址栏输入 https://www.example.com 并按下回车。 浏览器 UI 线程 会判断这是一个 URL 还是搜索查询。 如果是 URL，则会...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从地址栏回车到页面渲染\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-17T15:59:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/%E7%BD%91%E7%BB%9C/%E4%BB%8E%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%9B%9E%E8%BD%A6%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"从地址栏回车到页面渲染"}],["meta",{"property":"og:description","content":"从地址栏回车到页面渲染 整个过程可以分为两大阶段：网络请求阶段 和 浏览器渲染阶段。 第一阶段：网络请求阶段 这个阶段的目标是获取到页面的 HTML 资源。 1. 用户输入 & UI 线程处理 用户在地址栏输入 https://www.example.com 并按下回车。 浏览器 UI 线程 会判断这是一个 URL 还是搜索查询。 如果是 URL，则会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T15:59:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T15:59:21.000Z"}]]},"git":{"createdTime":1760716761000,"updatedTime":1760716761000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":7.68,"words":2303},"filePathRelative":"guide/computer/网络/从地址栏回车到页面渲染.md","autoDesc":true}');export{c as comp,d as data};
