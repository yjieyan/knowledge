import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as n,o as l}from"./app-DhW9NDPv.js";const r={};function o(a,s){return l(),i("div",null,[...s[0]||(s[0]=[n(`<p>您提到的这四个概念，是构建现代高性能 Web 应用网络基础设施的核心技术栈。它们分别从 <strong>协议、调度、缓存、传输</strong> 四个层面协同工作，以解决延迟和带宽问题。下面我将逐一深入解析。</p><hr><h3 id="一、-域名分片-http-1-1-时代的性能-hack" tabindex="-1"><a class="header-anchor" href="#一、-域名分片-http-1-1-时代的性能-hack"><span>一、 域名分片 - HTTP/1.1 时代的性能 Hack</span></a></h3><ul><li><strong>是什么</strong>：一种为了突破 <strong>HTTP/1.1 的队头阻塞</strong> 和浏览器对 <strong>同一域名并发连接数限制</strong>（通常是6-8个）而采用的技巧。</li><li><strong>如何做</strong>：将网站的静态资源（如图片、JS、CSS）放在多个不同的子域名下（例如 <code>static1.example.com</code>, <code>static2.example.com</code>, <code>static3.example.com</code>）。这样，浏览器会认为是在与不同的“服务器”通信，从而建立更多的 TCP 连接，实现更高程度的并行下载。</li><li><strong>例子</strong>：<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 原本都在一个域名下，受限于6个连接 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://static.example.com/a.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://static.example.com/b.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 分片后，可以突破限制 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://static1.example.com/a.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://static2.example.com/b.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://static3.example.com/c.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>代价与现状</strong>： <ul><li><strong>额外开销</strong>：每个新域名都需要进行额外的 <strong>DNS 查询、TCP 连接、TLS 握手</strong>，增加了延迟。</li><li><strong>已被淘汰</strong>：随着 <strong>HTTP/2 的普及</strong>，其<strong>多路复用</strong> 特性在单个连接上就能实现并行，完美解决了队头阻塞。在 HTTP/2 上使用域名分片反而会因额外的连接开销而<strong>降低性能</strong>。</li><li><strong>HTTP/3 的进一步发展</strong>：基于 QUIC，进一步解决了传输层的队头阻塞。</li></ul></li></ul><p><strong>结论</strong>：域名分片是 <strong>HTTP/1.1 时代的特定优化</strong>，在现代 HTTP/2+ 环境中已不推荐使用。</p><hr><h3 id="二、-cdn-调度-让用户找到-最近-的服务器" tabindex="-1"><a class="header-anchor" href="#二、-cdn-调度-让用户找到-最近-的服务器"><span>二、 CDN 调度 - 让用户找到“最近”的服务器</span></a></h3><p>CDN 的核心思想是<strong>将内容分发到全球各地的边缘节点</strong>。而调度系统就是决定用户应该访问哪个边缘节点的“智能导航”。</p><ul><li><strong>目标</strong>：将用户的请求<strong>定向到地理位置上最近、负载最健康、服务质量最好的 CDN 边缘节点</strong>。</li><li><strong>核心调度技术</strong>： <ol><li><strong>DNS 调度</strong>：最常用。通过智能 DNS 解析，根据用户的本地 DNS IP 地址，返回一个地理位置最近的边缘节点 IP。 <ul><li><strong>优点</strong>：简单、通用。</li><li><strong>缺点</strong>：精度依赖于本地 DNS 服务器的位置，可能不准（如本地 DNS 在运营商省网出口，但用户在一个偏远城市）。</li></ul></li><li><strong>Anycast</strong>：多个地理位置的 CDN 节点<strong>共享同一个 IP 地址</strong>。依赖于网络层的 BGP 路由协议，数据包会自动路由到“拓扑距离”最近的节点。 <ul><li><strong>优点</strong>：极其高效，延迟最低。用户无需任何解析，天然就路由到最近节点。</li><li><strong>缺点</strong>：基础设施成本高，通常用于对抗 DDoS 攻击和提供核心 API 服务。</li></ul></li><li><strong>HTTP 302/307 重定向调度</strong>：用户先访问一个全局调度器，该调度器根据用户的真实客户端 IP，返回 302 重定向响应，将其指向最优的边缘节点。 <ul><li><strong>优点</strong>：调度精度最高，因为能拿到用户的真实 IP。</li><li><strong>缺点</strong>：增加了一次重定向的 RTT 延迟。</li></ul></li></ol></li></ul><p><strong>现代 CDN 通常组合使用这些技术</strong>，例如先用 DNS 进行粗粒度调度，再用 Anycast 或 HTTP 重定向进行细粒度优化。</p><hr><h3 id="三、-边缘缓存-cdn-的核心价值" tabindex="-1"><a class="header-anchor" href="#三、-边缘缓存-cdn-的核心价值"><span>三、 边缘缓存 - CDN 的核心价值</span></a></h3><p>这是 CDN 提升性能、降低源站压力的直接体现。</p><ul><li><strong>是什么</strong>：将源站的资源<strong>缓存</strong>到全球各地的边缘节点上。</li><li><strong>工作流程</strong>： <ol><li><strong>首次访问 / 缓存未命中</strong>：用户请求到达边缘节点 -&gt; 节点发现自己没有缓存该资源 -&gt; 回源站获取 -&gt; 缓存到本地 -&gt; 返回给用户。（此次稍慢）</li><li><strong>后续访问 / 缓存命中</strong>：用户请求到达边缘节点 -&gt; 节点发现自己有缓存且未过期 -&gt; <strong>直接从边缘节点返回</strong>给用户。（此次极快）</li></ol></li><li><strong>缓存策略</strong>：边缘节点遵循标准的 HTTP 缓存规范（如 <code>Cache-Control</code>， <code>Expires</code>），同时也支持在 CDN 控制台进行更精细的缓存规则配置（如根据文件类型、路径设置不同的 TTL）。</li><li><strong>高级功能</strong>： <ul><li><strong>缓存预热</strong>：主动将资源推送到所有边缘节点，避免首次访问的缓存未命中。</li><li><strong>缓存清除</strong>：强制清除边缘节点上的旧缓存，以便回源获取最新内容。</li><li><strong>动态加速</strong>：对于无法缓存的动态请求，CDN 会通过优化过的骨干网路径回源，而不是让用户直接访问可能很远的源站。</li></ul></li></ul><p><strong>价值</strong>：边缘缓存将内容放在了“离用户最后一公里”的地方，极大地减少了网络延迟和源站负载。</p><hr><h3 id="四、-quic-和-0-rtt-下一代传输协议" tabindex="-1"><a class="header-anchor" href="#四、-quic-和-0-rtt-下一代传输协议"><span>四、 QUIC 和 0-RTT - 下一代传输协议</span></a></h3><p>QUIC (Quick UDP Internet Connections) 是基于 UDP 的现代安全传输协议，是 HTTP/3 的底层基础。其 <strong>0-RTT</strong> 特性是性能上的巨大飞跃。</p><ul><li><p><strong>核心优势</strong>：</p><ul><li><strong>基于 UDP</strong>：避免了 TCP 的队头阻塞，连接建立更快。</li><li><strong>集成加密</strong>：QUIC 默认使用 TLS 1.3，安全和传输密不可分。</li><li><strong>连接迁移</strong>：切换网络时（Wi-Fi -&gt; 5G），连接不会中断。</li></ul></li><li><p><strong>连接建立对比</strong>：</p><ul><li><strong>TCP + TLS 1.2+</strong>：需要 <strong>1-3 RTT</strong>。 <ul><li>1 RTT for TCP 握手。</li><li>1-2 RTT for TLS 握手。</li></ul></li><li><strong>QUIC (基于 TLS 1.3)</strong>： <ul><li><strong>首次连接</strong>：<strong>1 RTT</strong>。将 TCP 和 TLS 握手合并。</li><li><strong>会话恢复</strong>：<strong>0 RTT</strong>。</li></ul></li></ul></li><li><p><strong>0-RTT 的原理与威力</strong>：</p><ul><li>在首次连接成功后，客户端和服务器会交换并保存一些秘密信息（如会话票据）。</li><li>当客户端再次访问同一服务器时，它可以在 <strong>第一个数据包</strong> 中就携带<strong>应用数据</strong>（如 HTTP 请求），同时开始新的密钥协商。</li><li><strong>效果</strong>：对于重复访问，<strong>页面加载的第一个请求几乎感觉不到延迟</strong>，就像在本地发送数据一样快。</li></ul></li><li><p><strong>0-RTT 的安全考虑</strong>：</p><ul><li>存在 <strong>重放攻击</strong> 的风险。因为服务器在完全验证客户端之前就处理了 0-RTT 数据。</li><li>因此，它通常只用于安全的 <code>GET</code> 和 <code>HEAD</code> 等幂等请求。对于 <code>POST</code> 等非幂等操作需要谨慎。</li></ul></li></ul><hr><h3 id="总结-协同工作的现代网络栈" tabindex="-1"><a class="header-anchor" href="#总结-协同工作的现代网络栈"><span>总结：协同工作的现代网络栈</span></a></h3><p>这四项技术共同描绘了一条从“上古时代”到“现代”的 Web 性能优化演进路径：</p><ol><li><strong>域名分片</strong> 是针对 <strong>HTTP/1.1 缺陷</strong> 的临时补丁，已被更先进的协议所淘汰。</li><li><strong>CDN</strong> 通过 <strong>智能调度</strong> 和 <strong>边缘缓存</strong>，从 <strong>架构层面</strong> 解决了网络距离和源站压力的问题，是静态内容分发的基石。</li><li><strong>QUIC/HTTP/3</strong> 则从 <strong>传输协议层面</strong> 进行了革命，通过 <strong>0-RTT</strong> 等特性，极致地压低了连接建立的延迟，尤其对重复访问和移动场景体验提升巨大。</li></ol><p><strong>它们的关系是：</strong></p><ul><li>你访问一个使用了 CDN 的网站。</li><li><strong>CDN 调度系统</strong> 将你引导至最近的 <strong>边缘节点</strong>。</li><li>如果资源在 <strong>边缘缓存</strong> 中，它会被直接返回。</li><li>而整个数据传输过程，正逐渐从传统的 TCP+TLS 向更快的 <strong>QUIC 0-RTT</strong> 连接迁移。</li></ul><p>理解这套技术栈，意味着能从全局视角审视和优化 Web 应用的网络性能。</p>`,26)])])}const p=t(r,[["render",o]]),h=JSON.parse('{"path":"/guide/computer/%E7%BD%91%E7%BB%9C/%E5%9F%9F%E5%90%8D%E5%88%86%E7%89%87CDN%E8%B0%83%E5%BA%A6.html","title":"","lang":"zh-CN","frontmatter":{"description":"您提到的这四个概念，是构建现代高性能 Web 应用网络基础设施的核心技术栈。它们分别从 协议、调度、缓存、传输 四个层面协同工作，以解决延迟和带宽问题。下面我将逐一深入解析。 一、 域名分片 - HTTP/1.1 时代的性能 Hack 是什么：一种为了突破 HTTP/1.1 的队头阻塞 和浏览器对 同一域名并发连接数限制（通常是6-8个）而采用的技巧。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T03:59:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/%E7%BD%91%E7%BB%9C/%E5%9F%9F%E5%90%8D%E5%88%86%E7%89%87CDN%E8%B0%83%E5%BA%A6.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:description","content":"您提到的这四个概念，是构建现代高性能 Web 应用网络基础设施的核心技术栈。它们分别从 协议、调度、缓存、传输 四个层面协同工作，以解决延迟和带宽问题。下面我将逐一深入解析。 一、 域名分片 - HTTP/1.1 时代的性能 Hack 是什么：一种为了突破 HTTP/1.1 的队头阻塞 和浏览器对 同一域名并发连接数限制（通常是6-8个）而采用的技巧。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T03:59:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T03:59:38.000Z"}]]},"git":{"createdTime":1760716761000,"updatedTime":1760759978000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":2,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":6.06,"words":1819},"filePathRelative":"guide/computer/网络/域名分片CDN调度.md","autoDesc":true}');export{p as comp,h as data};
