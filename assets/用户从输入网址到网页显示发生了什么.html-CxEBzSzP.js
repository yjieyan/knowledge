import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as t}from"./app-Bp9_QJkp.js";const s={};function p(o,i){return t(),e("div",null,[...i[0]||(i[0]=[n('<h1 id="用户从输入网址到网页显示发生了什么" tabindex="-1"><a class="header-anchor" href="#用户从输入网址到网页显示发生了什么"><span>用户从输入网址到网页显示发生了什么</span></a></h1><p>完整过程，基于五层模型图来看 (五层结构协议只是OSI和TCP/IP的综合，实际应用还是TCP/IP的四层结构)。</p><p><strong>示意：主机 A 访问主机 B，四层模型和五层模型对比示意图</strong></p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/v8HFgG51ZkpbNwIF.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><ol><li>浏览器输入指定网页 URL</li><li>浏览器通过 DNS 协议，获取域名对应的 IP 地址</li><li>浏览器根据 IP 地址和端口号，向目标服务器发起一个 TCP 连接请求</li><li>浏览器在 TCP 连接上，向服务器发送一个 HTTP 请求报文，请求获取网页的内容。</li><li>服务器收到 HTTP 请求报文后进行处理，再返回 HTTP 响应报文给浏览器。</li><li>浏览器收到 HTTP 响应报文后，解析 HTML 代码渲染网页结构和样式，同时根据 HTML 中的资源 URL 再次发起请求获取资源内容，直至网页完全加载显示。</li><li>浏览器在无需和服务器通信时，可主动关闭 TCP 连接或等待服务器关闭请求。</li></ol><h2 id="浏览器解析-url" tabindex="-1"><a class="header-anchor" href="#浏览器解析-url"><span>浏览器解析 URL</span></a></h2><p>统一资源定位器。网络上的所有资源都靠着 URL 来定位，每一个文件就对应着一个 URL，就像是路径地址</p><h3 id="组成" tabindex="-1"><a class="header-anchor" href="#组成"><span>组成</span></a></h3><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/tJun0WJKXgt8zH0X.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><ol><li><strong>协议类型：</strong> URL 前缀通常有 HTTP 和 HTTPS 两种常见协议，也有如 ftp:等不常见的。</li><li><strong>域名：</strong> 域名是网址通用名或 IP 地址的可读版本。</li><li><strong>端口：</strong> 端口紧跟域名，用冒号隔开。</li><li><strong>资源路径：</strong> 资源路径在域名（端口）后，从第一个/开始，早期文件常物理存储于服务器主机，现可能在云上且路径可能虚拟。</li><li><strong>参数：</strong> 参数以键值对形式 key=value，用&amp;隔开，含义与请求方法有关。</li><li><strong>锚点：</strong> 锚点以#开头，是页面上的锚，不发给服务端，可定位网页位置。</li></ol><h2 id="查询本地-host-文件-列表" tabindex="-1"><a class="header-anchor" href="#查询本地-host-文件-列表"><span>查询本地 Host 文件/列表</span></a></h2><p>浏览器在本地会维护一个 hosts 列表，一般来说浏览器要先查看要访问的域名是否在hosts列表中，如果有的话，直接提取对应的 IP 地址记录，就好了。如果本地hosts列表内没有 [域名-IP] 对应记录的话，进行 DNS 解析</p><h2 id="dns-解析" tabindex="-1"><a class="header-anchor" href="#dns-解析"><span>DNS 解析</span></a></h2><p>DNS (Domain Name System) 域名系统，要解决的是 ⌈域名 和 IP 地址的映射问题⌋。</p><p>DNS 是应用层协议，基于 UDP 协议之上，端口为 <code>53</code></p><h3 id="本地缓存查询" tabindex="-1"><a class="header-anchor" href="#本地缓存查询"><span>本地缓存查询</span></a></h3><p>浏览器会首先检查本地缓存，依次查询：</p><ul><li><strong>浏览器缓存</strong>：最近访问过的域名/IP 映射。</li><li><strong>操作系统缓存</strong>：操作系统维护的 DNS 缓存。</li><li><strong>路由器缓存</strong>：家庭路由器可能也会缓存常见域名的解析结果。</li></ul><h3 id="查询-dns-服务器" tabindex="-1"><a class="header-anchor" href="#查询-dns-服务器"><span>查询 DNS 服务器</span></a></h3><p><strong>4 类层级的 DNS 服务器</strong></p><ol><li>根 DNS 服务器</li><li>顶级域名 DNS 服务器。比如域名后缀有如com、org、net和edu等。国家也有自己的顶级域，如uk、fr和ca</li><li>权威 DNS 服务器</li><li>本地 DNS 服务器</li></ol><p>如果缓存未命中，浏览器向配置的 DNS 服务器（通常是 ISP 提供的）发送查询请求，DNS 服务器会通过递归查询的方式解析域名：</p><ol><li><strong>根 DNS 服务器</strong>：返回顶级域名（如 <code>.com</code>）的服务器地址。</li><li><strong>顶级域名（TLD）服务器</strong>：返回权威 DNS 服务器的地址。</li><li><strong>权威 DNS 服务器</strong>：返回目标域名的具体 IP 地址。</li></ol><p>解析完成后，DNS 服务器将 IP 地址返回给浏览器。该 IP 地址可能是 IPv4 地址（如 <code>192.168.1.1</code>）或 IPv6 地址（如 <code>2400:cb00::</code>）。</p><h3 id="dns-两种工作查询流程" tabindex="-1"><a class="header-anchor" href="#dns-两种工作查询流程"><span>DNS 两种工作查询流程</span></a></h3><p><strong>迭代查询</strong></p><p>用户主机和本地 DNS 服务器逐步与其他 DNS 服务器通信，直至找到目标 IP 地址。</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/SXvH3roVmRZYhBur.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主机 <code>cis.poly.edu</code> 想知 <code>gaia.cs.umass.edu</code> 的 IP 地址。</p><p><code>gaia.cs.umass.edu</code>的权威 DNS 服务器为 <code>dns.css.umass.edu</code></p><ol><li>首先，主机 <code>cis.poly.edu</code>向本地 DNS 服务器 <code>dns.poly.edu</code> 发送一个 DNS 请求，查询报文包含被转换的域名 <code>gaia.cs.umass.edu</code></li><li>本地 DNS 服务器 <code>dns.poly.edu</code>检查缓存未发现记录，也不知道 <code>gaia.cs.umass.edu</code>的 IP 地址，转向请求根服务器</li><li>根服务器发现请求报文中有 <code>edu</code> 顶级域，告知本地 DNS 可向 <code>edu</code> 的 TLD DNS 发送请求，目标域名 IP 地址可能在那里。</li><li><code>edu</code> 的 TLD DNS 服务器不知请求域名 IP，见其有 <code>umass.edu</code> 前缀，告知本地 DNS 找 <code>umass.edu</code> 权威服务器。</li><li>本地 DNS 向权威服务器 <code>dns.cs.umass.edu</code> 发请求。因 <code>gaia.cs.umass.edu</code> 在权威服务器备案，有其 IP 记录，权威服务器成功将 IP 返回本地 DNS。</li><li>最后，本地 DNS 获目标域名 IP 返给请求主机。</li></ol><p><strong>递归查询</strong></p><p>由本地 DNS 服务器全权负责，用户主机只与本地 DNS 服务器通信，本地 DNS 服务器将负责与其他 DNS 服务器通信并返回结果。</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/tBNc1GEYqYuJaHoq.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="建立-tcp-连接-三次握手" tabindex="-1"><a class="header-anchor" href="#建立-tcp-连接-三次握手"><span>建立 TCP 连接（三次握手）</span></a></h2><p>获取 IP 地址后，浏览器需要与服务器建立通信连接。通常使用 <strong>TCP 协议</strong>（<code>https</code> 和 <code>http</code> 均基于 TCP）。此时，浏览器通过 <strong>Socket</strong> 调用操作系统的网络栈发起连接请求。</p><h3 id="tcp-首部格式" tabindex="-1"><a class="header-anchor" href="#tcp-首部格式"><span>TCP 首部格式</span></a></h3><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/BjuffymoBrXHBPQt.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><p><strong>源端口 和 目标端口 :</strong> 定位发送到哪个应用。</p><p><strong>序列号：</strong> 解决包乱序问题</p><p><strong>确认号：</strong> 确认发出去的数据包是否收到</p><p><strong>状态位：</strong> SYN (发起一个连接)、ACK (回复)、RST (重新连接) 、FIN (结束连接)</p><p><strong>窗口大小:</strong> 作用于流量控制</p><h3 id="三次握手具体过程" tabindex="-1"><a class="header-anchor" href="#三次握手具体过程"><span>三次握手具体过程</span></a></h3><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/jfePf6zXGGXPwNay.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><ol><li><strong>第一次握手</strong>：客户端发送 <strong>SYN</strong>（同步序列号）包，表明希望建立连接，并随机生成一个初始序列号 <code>Seq=100</code>。</li><li><strong>第二次握手</strong>：服务器收到 SYN 包后，返回 <strong>SYN-ACK</strong> 包，表示同意连接，并生成自己的序列号 <code>Seq=200</code>。</li><li><strong>第三次握手</strong>：客户端收到 SYN-ACK 包后，再发送一个 <strong>ACK</strong> 包确认连接建立。</li></ol><p>握手完成后，确保客户端和服务器双方的发送与接收能力正常。确定双方的初始序列号，为后续可靠传输做准备。客户端与服务器之间的连接正式建立，接下来即可传输数据。</p><h3 id="tcp-分割数据" tabindex="-1"><a class="header-anchor" href="#tcp-分割数据"><span>TCP 分割数据</span></a></h3><p>当网络层中的 TCP 数据包大小超过 MSS（最大报文段长度）时，需要将其分割成多个 TCP 段。这些 TCP 段随后由 IP 协议封装成 IP 报文。如果 IP 报文大小超过 MTU（通常为 1500 字节），则会进一步分片成更小的 IP 报文。</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/szBfuR3IJ2ePt5C9.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><h2 id="发送-http-请求" tabindex="-1"><a class="header-anchor" href="#发送-http-请求"><span>发送 HTTP 请求</span></a></h2><p>在 TCP 连接建立后，浏览器会向服务器发送 HTTP 请求，具体过程如下：</p><h3 id="http-请求报文的组成" tabindex="-1"><a class="header-anchor" href="#http-请求报文的组成"><span>HTTP 请求报文的组成</span></a></h3><ol><li><strong>请求行</strong>：包括请求方法（如 GET、POST）、路径（如 <code>/index.html</code>）和协议版本（如 <code>HTTP/1.1</code>）。</li><li><strong>请求头</strong>：包含浏览器信息（如 User-Agent）、支持的内容类型、Cookie、Host 等。</li><li><strong>请求体</strong>：仅在 POST 请求中存在，如表单数据或 JSON 数据。</li></ol><h3 id="封装过程-传输层" tabindex="-1"><a class="header-anchor" href="#封装过程-传输层"><span>封装过程 - 传输层</span></a></h3><ul><li>HTTP 请求数据被封装进 <strong>TCP 数据包</strong>。</li></ul><p>双方建立连接后，TCP 报文中数据部分存放 HTTP 头部与数据，组装好后交网络层处理。</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/6Ua9EnyFKk3bwS9E.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><h2 id="网络层-ip协议远程定位" tabindex="-1"><a class="header-anchor" href="#网络层-ip协议远程定位"><span>网络层 - IP协议远程定位</span></a></h2><p>TCP 模块在执行连接、手法、断开等各阶段操作的时候，都需要委托 IP 模块将数据封装成 ⌈网络包⌋ 发送给通信对象</p><h3 id="ip-首部格式" tabindex="-1"><a class="header-anchor" href="#ip-首部格式"><span>IP 首部格式</span></a></h3><p>关键字段：</p><ul><li><strong>协议：</strong> 06 表示 TCP</li><li><strong>源 IP 地址：</strong> 客户端输出的 IP 地址</li><li><strong>目标 IP 地址：</strong> 即通过 DNS 域名解析得到的 Web 服务器 IP</li></ul><p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/50MFGGvFtcY4tn3v.webp" alt="" loading="lazy"> <img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/lTF8GVxuxWHAOcCM.webp" alt="画板" loading="lazy"></p><p>如果客户端由多个网卡导致有多个 IP 地址：</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/0UZAGjUeVvHFiGdh.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据路由表规则，判断哪一个网卡作为源地址 IP；借助路由表内的子网掩码和目标地址进行 <code>与运算</code>，得到结果如果与 <code>Destination</code>内字段一致，就是用该网卡</p><h3 id="ip-报文生成" tabindex="-1"><a class="header-anchor" href="#ip-报文生成"><span>IP 报文生成</span></a></h3><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/M12mk5lmGOG3SivV.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><h2 id="添加-mac-头部" tabindex="-1"><a class="header-anchor" href="#添加-mac-头部"><span>添加 MAC 头部</span></a></h2><p>MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息。</p><p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/2d7TjwbwhYVmIDrM.webp" alt="画板" loading="lazy"> <img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/4Jq2VVhN7vULrDmO.webp" alt="画板" loading="lazy"></p><p>一般在 TCP/IP 通信里，MAC 包头的协议类型只使用：</p><ul><li><strong>0800:</strong> IP 协议</li><li><strong>0806:</strong> ARP 协议</li></ul><h3 id="如何确定发送方和接收方呢" tabindex="-1"><a class="header-anchor" href="#如何确定发送方和接收方呢"><span>如何确定发送方和接收方呢？</span></a></h3><p>发送方的 MAC 地址：MAC地址在网卡生产时被写入ROM中，只需将其读出并写入MAC头部即可。</p><p>接收方的 MAC 地址: <strong>查询路由表</strong></p><p>每个主机有 ARP 高速缓存，存着局域网上各主机和路由器 IP 地址到 MAC 地址映射表。若主机 A 知主机 B IP 地址但缓存无此映射，A 广播发送 ARP 请求分组，B 收后发响应分组告知 MAC 地址，A 随后写入 B 的 IP 到 MAC 映射。</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/8Da0YvU90t2vE8rJ.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>工作示意图</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/VxrkBZBmIN0BKaP8.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是ARP 缓存表中的条目通常有一定的生存时间（TTL），超过时间需要重新发送 ARP 请求。</p><h3 id="linux-内查询-arp-缓存" tabindex="-1"><a class="header-anchor" href="#linux-内查询-arp-缓存"><span>Linux 内查询 ARP 缓存</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">arp -a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/KIYbkCIETcPremrz.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="添加-mac-帧头后的报文首部" tabindex="-1"><a class="header-anchor" href="#添加-mac-帧头后的报文首部"><span>添加 MAC 帧头后的报文首部</span></a></h3><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/U33OSI6qdkeR0Im2.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><h2 id="出口-网卡" tabindex="-1"><a class="header-anchor" href="#出口-网卡"><span>出口 - 网卡</span></a></h2><p>数字信息转换为电信号</p><p>其开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列。</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/kI0MK8pNy7rVSVaR.webp" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><ul><li>起始帧分界符：是一个用来表示包起始位置的标记</li><li>末尾的 <code>FCS</code>（帧校验序列）检查包传输的过程中是否有损坏</li></ul><p>最后网卡会将包转为电信号，通过网线发送出去。</p><h2 id="交换机-二层网络设备" tabindex="-1"><a class="header-anchor" href="#交换机-二层网络设备"><span>交换机 - 二层网络设备</span></a></h2><p>在 MAC 层，电信号通过网线接口进入交换机，被转换成数字信号。经过 FCS 校验无误后，数据包会被存入缓冲区。这一过程类似于计算机网卡的操作，但交换机的工作方式有所不同。<br> 交换机会根据其内部维护的 MAC 地址与端口映射表查找目标 MAC 地址，并将信号发送至相应端口。若找不到目标 MAC 地址，则会将信号转发到除源端口外的所有其他端口。一旦找到目标 MAC 地址，就会将其记录到映射表中。</p><h2 id="路由器-三层网络设备" tabindex="-1"><a class="header-anchor" href="#路由器-三层网络设备"><span>路由器 - 三层网络设备</span></a></h2><p>每个端口都具有 MAC 地址和 IP 端口号</p><p>转发包时，路由器端口先接收发给自己的以太网包，查询路由表确定转发目标，再由相应端口发送出去。</p><p><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/6Tw1AjmmYo6diOZT.webp" alt="" loading="lazy"> <img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/29EWC8Rtw12i9HBC.webp" alt="" loading="lazy"></p><p><strong>工作机制：</strong></p><ol><li>电信号到网线接口，路由器模块转成数字信号，通过包末尾 FCS 校验错误。</li><li>检查 MAC 头部接收方 MAC 地址，若发给自己则放入接收缓冲区，否则丢弃。</li><li><strong>去掉</strong> 收到报文的 MAC 头部，后取出目标地址 IP，根据 IP 内容进行包的转发</li><li>查询路由表判断转发目标</li><li>将表内条目子网掩码与目标 IP 做 &amp; 运算，结果与条目目标地址匹配则为候选转发目标，不匹配则继续与下个条目进行路由匹配。</li><li>若无匹配，选择默认路由，子网掩码为 <code>0.0.0.0</code></li></ol><h3 id="路由器再发送" tabindex="-1"><a class="header-anchor" href="#路由器再发送"><span>路由器再发送</span></a></h3><p>根据路由表网关列判断对方地址。</p><ol><li>若网关是 IP 地址，此 IP 为转发目标地址，未达终点，需路由器继续转发。</li><li>若网关为空，IP 头部接收方 IP 地址即转发目标地址，找到目标地址，抵达终点。</li><li>之后通过该 IP 查询对应的 MAC 依然是先查询 ARP 缓存，如果查询不到则发送 ARP 请求</li><li>查询到 MAC 之后将数据包封装加上帧头和FCS用于校验的帧尾后其转换成电信号并通过端口发送出去。</li><li>后续可能还会反复通过交换器和路由器</li></ol><h2 id="服务器接收请求" tabindex="-1"><a class="header-anchor" href="#服务器接收请求"><span>服务器接收请求</span></a></h2><p>服务器接收到数据包后，按以下步骤处理：</p><h3 id="解封装数据包" tabindex="-1"><a class="header-anchor" href="#解封装数据包"><span>解封装数据包</span></a></h3><ul><li>服务器从 MAC 帧中提取出 IP 数据包，再从 IP 数据包中提取出 TCP 数据包，最终还原为 HTTP 请求报文。</li></ul><h3 id="验证数据" tabindex="-1"><a class="header-anchor" href="#验证数据"><span>验证数据</span></a></h3><ul><li>验证目标 MAC 地址是否匹配网卡。</li><li>验证目标 IP 地址是否匹配服务器。</li><li>如果是 TCP 协议，还需验证序列号是否正确。</li></ul><h3 id="交给应用程序" tabindex="-1"><a class="header-anchor" href="#交给应用程序"><span>交给应用程序</span></a></h3><ul><li>根据端口号（如 80 或 443），将请求转发给相应的 Web 服务器（如 Nginx）。</li><li>Web 服务器将请求转发给后端应用（如 Java、Python 编写的服务），处理业务逻辑。</li></ul><h2 id="服务器处理业务逻辑" tabindex="-1"><a class="header-anchor" href="#服务器处理业务逻辑"><span>服务器处理业务逻辑</span></a></h2><p>服务器根据请求内容处理业务逻辑，可能涉及以下过程：</p><p><strong>静态资源</strong>：如果请求的是静态文件（如 HTML、CSS、图片），服务器直接读取本地文件并返回。</p><p><strong>动态资源</strong>：如果请求的是动态内容（如用户数据），服务器会调用后端程序。</p><p>后端程序可能需要访问数据库、缓存系统或其他服务来获取数据。</p><p><strong>生成 HTTP 响应</strong>：将处理结果封装为 HTTP 响应报文，包含响应行、响应头和响应体。</p><h2 id="数据返回客户端" tabindex="-1"><a class="header-anchor" href="#数据返回客户端"><span>数据返回客户端</span></a></h2><h3 id="封装过程" tabindex="-1"><a class="header-anchor" href="#封装过程"><span>封装过程</span></a></h3><p>和上述封装请求一致</p><p>HTTP 响应被封装为 TCP 数据包。</p><p>TCP 数据包进一步封装为 IP 数据包和 MAC 帧。</p><p>MAC帧经过网卡转化成为电信号后开始传输</p><h3 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输"><span>数据传输</span></a></h3><p>与上述发送请求反向</p><p>数据包沿原路返回，经过多个路由器和交换机，最终到达客户端。</p><h3 id="客户端接收" tabindex="-1"><a class="header-anchor" href="#客户端接收"><span>客户端接收</span></a></h3><p>浏览器接收到数据包后，解封装提取 HTTP 响应报文。</p><p>根据响应状态码（如 200、404、500），决定下一步处理逻辑。</p><h2 id="浏览器加载、解析和渲染" tabindex="-1"><a class="header-anchor" href="#浏览器加载、解析和渲染"><span>浏览器加载、解析和渲染</span></a></h2><p>浏览器的构成</p><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/FNDiXpnwn5LxzSbQ.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>三种渲染引擎</p><ol><li>Trident内核： IE</li><li>Webkit内核：Chrome,Safari</li><li>Gecko内核：FireFox</li></ol><h3 id="解析和渲染" tabindex="-1"><a class="header-anchor" href="#解析和渲染"><span>解析和渲染</span></a></h3><figure><img src="https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/KkJ0kvycsfkVXq5g.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>包括：</p><ol><li>解析 html 生成 dom 树</li><li>解析 css 生成 cssom 树</li><li>将 dom 树和 cssom 树合并形成渲染树</li><li>遍历渲染树开始布局和计算</li><li>绘制渲染树，显示到屏幕</li><li>Repaint 和 Reflow 当用户在浏览网页时进行交互或通过 js 脚本改变页面结构时，以上的部分操作有可能重复运行，此过程称为 Repaint 或 Reflow。</li></ol><h2 id="用户看到网页" tabindex="-1"><a class="header-anchor" href="#用户看到网页"><span>用户看到网页</span></a></h2><p>经过上述步骤，浏览器将完整网页渲染到屏幕上，用户即可看到并交互。</p>',142)])])}const d=a(s,[["render",p]]),l=JSON.parse('{"path":"/guide/%E6%B5%8F%E8%A7%88%E5%99%A8_%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%94%A8%E6%88%B7%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E7%BD%91%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html","title":"用户从输入网址到网页显示发生了什么","lang":"zh-CN","frontmatter":{"description":"用户从输入网址到网页显示发生了什么 完整过程，基于五层模型图来看 (五层结构协议只是OSI和TCP/IP的综合，实际应用还是TCP/IP的四层结构)。 示意：主机 A 访问主机 B，四层模型和五层模型对比示意图 画板画板 步骤 浏览器输入指定网页 URL 浏览器通过 DNS 协议，获取域名对应的 IP 地址 浏览器根据 IP 地址和端口号，向目标服务器...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用户从输入网址到网页显示发生了什么\\",\\"image\\":[\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/v8HFgG51ZkpbNwIF.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/tJun0WJKXgt8zH0X.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/SXvH3roVmRZYhBur.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/tBNc1GEYqYuJaHoq.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/BjuffymoBrXHBPQt.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/jfePf6zXGGXPwNay.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/szBfuR3IJ2ePt5C9.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/6Ua9EnyFKk3bwS9E.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/50MFGGvFtcY4tn3v.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/lTF8GVxuxWHAOcCM.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/0UZAGjUeVvHFiGdh.png\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/M12mk5lmGOG3SivV.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/2d7TjwbwhYVmIDrM.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/4Jq2VVhN7vULrDmO.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/8Da0YvU90t2vE8rJ.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/VxrkBZBmIN0BKaP8.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/KIYbkCIETcPremrz.png\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/U33OSI6qdkeR0Im2.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/kI0MK8pNy7rVSVaR.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/6Tw1AjmmYo6diOZT.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/29EWC8Rtw12i9HBC.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/FNDiXpnwn5LxzSbQ.webp\\",\\"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/KkJ0kvycsfkVXq5g.png\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/%E6%B5%8F%E8%A7%88%E5%99%A8_%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%94%A8%E6%88%B7%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E7%BD%91%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"用户从输入网址到网页显示发生了什么"}],["meta",{"property":"og:description","content":"用户从输入网址到网页显示发生了什么 完整过程，基于五层模型图来看 (五层结构协议只是OSI和TCP/IP的综合，实际应用还是TCP/IP的四层结构)。 示意：主机 A 访问主机 B，四层模型和五层模型对比示意图 画板画板 步骤 浏览器输入指定网页 URL 浏览器通过 DNS 协议，获取域名对应的 IP 地址 浏览器根据 IP 地址和端口号，向目标服务器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.code-nav.cn/mianshiya/question_picture/1799682467499941889/v8HFgG51ZkpbNwIF.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":12.47,"words":3740},"filePathRelative":"guide/浏览器&服务器/浏览器/用户从输入网址到网页显示发生了什么.md","autoDesc":true}');export{d as comp,l as data};
