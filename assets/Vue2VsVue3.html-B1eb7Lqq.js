import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as t}from"./app-B8OghdsB.js";const l={};function e(h,s){return t(),n("div",null,[...s[0]||(s[0]=[a(`<h1 id="vue2-与-vue3-对比" tabindex="-1"><a class="header-anchor" href="#vue2-与-vue3-对比"><span>Vue2 与 Vue3 对比</span></a></h1><ol><li><strong>架构与响应式原理</strong>（最根本的区别）</li><li><strong>性能优化</strong></li><li><strong>Composition API vs Options API</strong></li><li><strong>逻辑复用与代码组织</strong></li><li><strong>TypeScript 支持</strong></li><li><strong>源码与打包</strong></li><li><strong>新的组件和 API</strong></li><li><strong>总结与对比表格</strong></li></ol><hr><h3 id="_1-架构与响应式原理-object-defineproperty-vs-proxy" tabindex="-1"><a class="header-anchor" href="#_1-架构与响应式原理-object-defineproperty-vs-proxy"><span>1. 架构与响应式原理：<code>Object.defineProperty</code> vs <code>Proxy</code></span></a></h3><p>这是 Vue2 与 Vue3 最根本、最核心的区别，它决定了许多其他特性的实现方式。</p><p><strong>Vue2：<code>Object.defineProperty</code></strong></p><ul><li><strong>原理</strong>：Vue2 通过 <code>Object.defineProperty</code> 来递归地遍历数据对象的所有属性，并对每一个属性设置 <code>getter</code> 和 <code>setter</code>，从而在数据被读取或修改时进行依赖追踪和派发更新。</li><li><strong>局限性</strong>： <ul><li><strong>无法检测属性的添加或删除</strong>：由于 <code>Object.defineProperty</code> 是在初始化时对<em>现有属性</em>进行劫持，所以动态给对象新增或删除属性时，Vue 无法追踪到。这就是为什么我们需要使用 <code>Vue.set</code> 和 <code>Vue.delete</code> 这些 API 来保证响应式。</li><li><strong>数组监听需要 hack</strong>：直接通过索引设置数组项 (<code>array[index] = newValue</code>) 或修改数组长度 (<code>array.length = newLength</code>) 也无法被检测。Vue2 通过重写数组的 7 个变异方法（如 <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code>, <code>sort</code>, <code>reverse</code>）来实现响应式。</li><li><strong>深度递归性能开销</strong>：对于深层嵌套的对象，递归遍历所有属性并转换为响应式的过程会有一定的性能消耗。</li></ul></li></ul><p><strong>Vue3：<code>Proxy</code></strong></p><ul><li><strong>原理</strong>：Vue3 使用 ES6 的 <code>Proxy</code> 来代理整个对象。<code>Proxy</code> 不直接操作对象的属性，而是创建一个对象的“代理层”，可以拦截并重新定义该对象的基本操作。</li><li><strong>优势</strong>： <ul><li><strong>全面拦截</strong>：<code>Proxy</code> 可以拦截对象上多达 13 种操作，包括属性的读取、设置、删除、<code>in</code> 操作符等。这意味着它天生就能检测到属性的动态添加和删除，无需特殊 API。</li><li><strong>更好的数组支持</strong>：对数组的任何操作，包括通过索引修改、使用 <code>length</code> 属性，都能被完美拦截。</li><li><strong>性能优化</strong>： <ul><li><code>Proxy</code> 代理的是整个对象，不需要像 Vue2 那样递归遍历所有属性。Vue3 在这里采用了惰性代理的策略：只有在真正访问到某个嵌套属性时，才会继续用 <code>Proxy</code> 代理它。这减少了初始化的开销。</li><li>由于 <code>Proxy</code> 是语言层面的支持，性能通常比 <code>Object.defineProperty</code> 更好。</li></ul></li></ul></li></ul><p><strong>简单示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Vue2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 非响应式！</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 响应式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Vue3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reactive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 响应式！</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-性能优化" tabindex="-1"><a class="header-anchor" href="#_2-性能优化"><span>2. 性能优化</span></a></h3><p>Vue3 在性能方面做了大量工作，主要体现在：</p><ul><li><p><strong>编译时优化</strong>：</p><ul><li><strong>Block Tree &amp; Patch Flag</strong>：Vue3 的编译器在编译模板时，会分析动态节点（如 <code>{{ name }}</code> 或 <code>:id=&quot;dynamicId&quot;</code>），并为它们打上不同的“补丁标志”（Patch Flag）。在运行时，虚拟 DOM 的 Diff 算法可以根据这些标志，只比对动态变化的节点，跳过静态内容，大大提升了 Diff 效率。</li><li><strong>静态提升</strong>：模板中的静态节点或静态属性会被提升到渲染函数之外。这意味着它们只会在首次渲染时被创建，后续更新时会直接复用，避免了不必要的创建开销。</li><li><strong>Tree Flattening</strong>：将模板中的静态节点“压平”，在 Diff 时直接跳过整个静态树，进一步优化更新性能。</li></ul></li><li><p><strong>源码体积优化</strong>：</p><ul><li><strong>更好的 Tree-shaking</strong>：Vue3 的代码采用了 ES Module 的模块化写法，并且将许多 API（如 <code>v-model</code>、<code>transition</code>）设计为可树的。这意味着如果你在项目中没有使用这些功能，它们最终不会被打包到生产环境的代码中，从而减小了打包体积。</li></ul></li></ul><hr><h3 id="_3-composition-api-vs-options-api" tabindex="-1"><a class="header-anchor" href="#_3-composition-api-vs-options-api"><span>3. Composition API vs Options API</span></a></h3><p>这是从开发者视角看最直观的变化。</p><p><strong>Vue2：Options API</strong></p><ul><li><strong>组织方式</strong>：按照选项（<code>data</code>, <code>methods</code>, <code>computed</code>, <code>watch</code>, <code>生命周期</code>）来组织代码。</li><li><strong>优点</strong>：结构清晰，对于初学者和小型项目非常友好，每个选项的功能一目了然。</li><li><strong>缺点</strong>：在复杂的组件中，<strong>逻辑关注点</strong>可能会分散在不同的选项中。例如，一个“用户管理”的功能，其数据在 <code>data</code>，方法在 <code>methods</code>，计算属性在 <code>computed</code>，导致阅读和维护时需要上下反复滚动。</li></ul><p><strong>Vue3：Composition API (<code>setup</code> 函数)</strong></p><ul><li><strong>组织方式</strong>：允许开发者基于<strong>逻辑功能</strong>来组织代码，而不是基于选项类型。所有相关的数据、方法和生命周期都可以写在一起。</li><li><strong>核心思想</strong>：将可复用的逻辑代码提取为一个个“组合式函数”（Composable Function）。</li><li><strong>优点</strong>： <ul><li><strong>更好的逻辑复用与封装</strong>：解决了 Vue2 Mixins 带来的命名冲突、数据来源不清晰等问题。</li><li><strong>更灵活的代码组织</strong>：可以将相关联的功能代码紧密地放在一起，提高代码的可读性和可维护性，尤其是在大型项目中。</li><li><strong>更好的 TypeScript 集成</strong>：因为 Composition API 主要使用普通的变量和函数，类型推断非常自然。</li></ul></li></ul><p><strong>代码对比示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Vue2 - Options API</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      searchQuery</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  computed</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    filteredList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // ... 基于 searchQuery 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  mounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Component mounted and count is:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Vue3 - Composition API</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 计数器功能</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> doubleCount</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    onMounted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Component mounted and count is:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 搜索功能 (可以放在一起，也可以提取到单独的函数)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> searchQuery</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> filteredList</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // ... 基于 searchQuery 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      searchQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      filteredList</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-逻辑复用" tabindex="-1"><a class="header-anchor" href="#_4-逻辑复用"><span>4. 逻辑复用</span></a></h3><ul><li><strong>Vue2</strong>：主要通过 <strong>Mixins</strong> 和 <strong>作用域插槽</strong> 来实现逻辑复用。 <ul><li><strong>Mixins 的缺点</strong>： <ol><li><strong>命名冲突</strong>：多个 Mixin 可能定义了相同的属性或方法。</li><li><strong>数据来源不清晰</strong>：组件中使用的属性或方法来自哪个 Mixin 不明确，增加了理解成本。</li><li><strong>可重用性有限</strong>：Mixin 不能接受参数来定制其行为。</li></ol></li></ul></li><li><strong>Vue3</strong>：主要通过 <strong>组合式函数</strong>。 <ul><li><strong>优点</strong>： <ol><li><strong>显式的数据来源</strong>：通过解构赋值，可以清楚地知道返回了哪些数据和方法。</li><li><strong>避免命名冲突</strong>：可以通过变量命名来避免。</li><li><strong>可传参</strong>：组合式函数可以接受参数，使其更加灵活。</li><li><strong>可嵌套</strong>：一个组合式函数可以调用另一个组合式函数。</li></ol></li></ul></li></ul><hr><h3 id="_5-typescript-支持" tabindex="-1"><a class="header-anchor" href="#_5-typescript-支持"><span>5. TypeScript 支持</span></a></h3><ul><li><strong>Vue2</strong>：TS 支持是通过 <code>vue-class-component</code> 或 <code>vue-property-decorator</code> 这类装饰器方案实现的，属于“嫁接”式的支持，与 Vue 本身的集成度不够完美，类型推断有时会遇到困难。</li><li><strong>Vue3</strong>：源码本身就是用 TypeScript 重写的，提供了<strong>一流的 TypeScript 支持</strong>。无论是 Composition API 还是 Options API，都能享受到完美的类型推导和 IDE 支持。</li></ul><hr><h3 id="_6-其他重要变化" tabindex="-1"><a class="header-anchor" href="#_6-其他重要变化"><span>6. 其他重要变化</span></a></h3><ul><li><strong>Fragment</strong>：Vue3 组件支持多个根节点，无需再用一个额外的 <code>div</code> 包裹。</li><li><strong>Teleport</strong>：新增 <code>&lt;Teleport&gt;</code> 组件，可以将组件的一部分内容“传送”到 DOM 中的其他位置，非常适合处理模态框、通知框等。</li><li><strong>Suspense</strong>：实验性功能，提供了一种在组件树中协调异步依赖的机制，可以优雅地处理异步组件的加载状态。</li><li><strong>生命周期重命名</strong>：<code>beforeDestroy</code> 和 <code>destroyed</code> 被更名为 <code>beforeUnmount</code> 和 <code>unmounted</code>，更贴切其含义。</li><li><strong>移除过滤器</strong>：Vue3 移除了过滤器，建议使用计算属性或方法来实现相同功能。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">Vue2</th><th style="text-align:left;">Vue3</th><th style="text-align:left;">优势</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>响应式原理</strong></td><td style="text-align:left;"><code>Object.defineProperty</code></td><td style="text-align:left;"><code>Proxy</code></td><td style="text-align:left;">更强大、性能更好、支持动态属性</td></tr><tr><td style="text-align:left;"><strong>API 风格</strong></td><td style="text-align:left;">Options API 为主</td><td style="text-align:left;">Composition API + Options API</td><td style="text-align:left;">更好的逻辑组织和复用，更好的 TS 支持</td></tr><tr><td style="text-align:left;"><strong>打包体积</strong></td><td style="text-align:left;">较大</td><td style="text-align:left;">更好的 Tree-shaking，体积更小</td><td style="text-align:left;">更优的打包体积</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">良好</td><td style="text-align:left;">编译时优化（Patch Flag， 静态提升）</td><td style="text-align:left;">更快的渲染和更新</td></tr><tr><td style="text-align:left;"><strong>TypeScript</strong></td><td style="text-align:left;">需要装饰器等，支持不完美</td><td style="text-align:left;">原生支持，类型推断优秀</td><td style="text-align:left;">开发体验更好</td></tr><tr><td style="text-align:left;"><strong>逻辑复用</strong></td><td style="text-align:left;">Mixins</td><td style="text-align:left;">组合式函数</td><td style="text-align:left;">更灵活、更清晰</td></tr><tr><td style="text-align:left;"><strong>新组件</strong></td><td style="text-align:left;">无</td><td style="text-align:left;">Fragment, Teleport, Suspense</td><td style="text-align:left;">更强大的功能</td></tr></tbody></table><p><strong>结论</strong>：</p><p>Vue3 是一次重大的革新，它不仅在性能上实现了超越，更重要的是通过 Composition API 提供了更优越的代码组织和逻辑复用能力，并拥抱了现代前端开发工具链（如 TypeScript、Vite）。它代表了 Vue 框架未来的发展方向。当然，Vue3 也完全兼容 Vue2 的绝大部分特性，使得老项目可以平稳地、渐进式地迁移。</p><hr>`,39)])])}const r=i(l,[["render",e]]),d=JSON.parse('{"path":"/guide/source-code/Vue2VsVue3.html","title":"Vue2 与 Vue3 对比","lang":"zh-CN","frontmatter":{"description":"Vue2 与 Vue3 对比 架构与响应式原理（最根本的区别） 性能优化 Composition API vs Options API 逻辑复用与代码组织 TypeScript 支持 源码与打包 新的组件和 API 总结与对比表格 1. 架构与响应式原理：Object.defineProperty vs Proxy 这是 Vue2 与 Vue3 最根本...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2 与 Vue3 对比\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T15:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/source-code/Vue2VsVue3.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"Vue2 与 Vue3 对比"}],["meta",{"property":"og:description","content":"Vue2 与 Vue3 对比 架构与响应式原理（最根本的区别） 性能优化 Composition API vs Options API 逻辑复用与代码组织 TypeScript 支持 源码与打包 新的组件和 API 总结与对比表格 1. 架构与响应式原理：Object.defineProperty vs Proxy 这是 Vue2 与 Vue3 最根本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T15:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T15:34:32.000Z"}]]},"git":{"createdTime":1760888072000,"updatedTime":1760888072000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":7.18,"words":2154},"filePathRelative":"guide/source-code/Vue2VsVue3.md","autoDesc":true}');export{r as comp,d as data};
