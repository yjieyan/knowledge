import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as n,o as a}from"./app-DLeoub0m.js";const t={};function l(d,s){return a(),e("div",null,[...s[0]||(s[0]=[n(`<h1 id="vue2-源码解析" tabindex="-1"><a class="header-anchor" href="#vue2-源码解析"><span>Vue2 源码解析</span></a></h1><h3 id="总览-一个完整的挂载流程" tabindex="-1"><a class="header-anchor" href="#总览-一个完整的挂载流程"><span>总览：一个完整的挂载流程</span></a></h3><p>一个 Vue 实例从创建到最终在页面上呈现，大致经历了以下关键步骤：</p><ol><li><strong>初始化（Init）</strong>：初始化实例的生命周期、事件、渲染函数等。</li><li><strong>编译（Compilation）</strong>：将模板编译成渲染函数（如果使用运行时+编译器的 Vue 版本）。</li><li><strong>建立响应式（Reactivity）</strong>：处理 <code>data</code>、<code>props</code>、<code>computed</code>、<code>watch</code> 等，建立数据的响应式连接。</li><li><strong>挂载（Mount）</strong>：执行渲染函数生成 Virtual DOM，然后通过 Patch 过程创建真实 DOM 并插入到页面指定位置。</li><li><strong>更新（Update）</strong>：进入运行期，当响应式数据变化时，触发异步更新队列，重新渲染视图。</li></ol><p>接下来，我们深入每个阶段。</p><hr><h3 id="阶段一-初始化-init" tabindex="-1"><a class="header-anchor" href="#阶段一-初始化-init"><span>阶段一：初始化（Init）</span></a></h3><p>当我们执行 <code>new Vue(options)</code> 时，Vue 内部会启动初始化过程。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  el</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;#app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Hello Vue!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&lt;div&gt;{{ message }}&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>合并选项</strong>：</p><ul><li>Vue 会将用户传入的 <code>options</code> 与 Vue 内置的选项（如 <code>components</code>, <code>directives</code>, <code>_base</code> 等）进行合并。</li><li>对于 <code>data</code>、<code>props</code>、<code>methods</code> 等，会进行策略合并，最终挂载到实例 <code>vm</code> 上。</li></ul></li><li><p><strong>初始化核心属性</strong>：</p><ul><li><code>initLifecycle(vm)</code>：初始化实例的生命周期状态，建立父子组件关系。设置 <code>$parent</code>, <code>$children</code>, <code>$root</code> 等属性。</li><li><code>initEvents(vm)</code>：初始化父组件传递的事件监听。</li><li><code>initRender(vm)</code>：初始化与渲染相关的属性和方法，如 <code>$slots</code>, <code>$scopedSlots</code>, <code>$createElement</code>（<code>_c</code> 和 <code>h</code> 函数）。</li><li>此时，实例 <code>vm</code> 已经具备了基本的通信和渲染能力。</li></ul></li></ol><hr><h3 id="阶段二-模板编译" tabindex="-1"><a class="header-anchor" href="#阶段二-模板编译"><span>阶段二：模板编译</span></a></h3><p>这个阶段不是必须的。<br> 如果你使用 Vue 的<strong>仅运行时</strong>版本，或者直接写 <code>render</code> 函数，则会跳过此步骤。</p><ol><li><p><strong>模板来源的优先级</strong>：<br> Vue 会按照以下优先级获取模板：</p><ul><li>用户提供了 <code>render</code> 函数？ -&gt; 直接使用。</li><li>用户提供了 <code>template</code> 选项？ -&gt; 编译它。</li><li>用户提供了 <code>el</code> 选项？ -&gt; 将 <code>el.outerHTML</code> 作为模板。</li></ul></li><li><p><strong>编译过程</strong>：<br> 将模板字符串编译成渲染函数，这个过程包含三个步骤：</p><ul><li><strong>解析（Parse）</strong>：将模板字符串解析成<strong>抽象语法树（AST）</strong>。AST 是一个用 JavaScript 对象描述的节点树，代表了模板的语法结构。</li><li><strong>优化（Optimize）</strong>：遍历 AST，标记出<strong>静态节点</strong>和静态根节点。这些节点在后续的更新渲染中永远不会改变，Vue 会在 Diff 过程中直接跳过它们，从而提升性能。</li><li><strong>生成代码（Generate）</strong>：将优化后的 AST 编译成可执行的 JavaScript 代码字符串，即渲染函数的代码。这个代码字符串最终会通过 <code>new Function()</code> 被转换成真正的 <code>render</code> 函数。</li></ul><p><strong>最终结果</strong>：无论用户提供的是模板还是 <code>el</code>，Vue 的目标都是得到一个 <code>render</code> 函数。</p></li></ol><hr><h3 id="阶段三-建立响应式-reactivity" tabindex="-1"><a class="header-anchor" href="#阶段三-建立响应式-reactivity"><span>阶段三：建立响应式（Reactivity）</span></a></h3><p>这是 Vue 的“灵魂”所在，通过 <code>initState(vm)</code> 完成。</p><ol><li><p><strong>初始化数据</strong>：</p><ul><li><code>initProps(vm)</code>：处理 <code>props</code>，将其变为响应式，并代理到 <code>vm._props</code> 上。</li><li><code>initMethods(vm)</code>：将 <code>methods</code> 中的方法绑定到实例 <code>vm</code> 上。</li><li><code>initData(vm)</code>：<strong>核心步骤</strong>。遍历 <code>data</code> 函数返回的对象，通过 <code>Object.defineProperty</code> (Vue 2) 或 <code>Proxy</code> (Vue 3) 将其属性转换为 <strong>getter/setter</strong>。 <ul><li>同时，它会为每个属性创建一个 <strong>Dep</strong> 实例（依赖收集器）。</li></ul></li><li><code>initComputed(vm)</code> 和 <code>initWatch(vm)</code>：处理计算属性和侦听器。计算属性本质是一个惰性求值的 Watcher，而侦听器则是一个用户 Watcher。</li></ul></li><li><p><strong>依赖收集的准备工作</strong>：<br> 此时，响应式数据已经准备就绪，它们身上的 getter/setter 已经建立。同时，一个关键的“观察者”——<strong>渲染 Watcher</strong> 即将被创建，它将负责视图的更新。</p></li></ol><hr><h3 id="阶段四-挂载-mount" tabindex="-1"><a class="header-anchor" href="#阶段四-挂载-mount"><span>阶段四：挂载（Mount）</span></a></h3><p>这是将 Virtual DOM 变成真实 DOM 并插入页面的过程，通过 <code>$mount</code> 方法触发。</p><ol><li><p><strong>创建渲染 Watcher</strong>：</p><ul><li>在挂载开始时，Vue 会创建一个<strong>渲染 Watcher</strong>。这个 Watcher 的副作用函数就是执行 <code>updateComponent</code> 方法。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">updateComponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // _render: 调用编译得到的 render 函数，生成 VNode（Virtual DOM）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // _update: 将 VNode 与旧 VNode 对比，并将差异应用到真实 DOM 上（patch）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">hydrating</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">updateComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>执行初始渲染</strong>：</p><ul><li>渲染 Watcher 被创建后，会立即执行一次 <code>updateComponent</code> 函数。</li><li><code>vm._render()</code>：执行渲染函数。在这个过程中，会读取模板中用到的响应式数据（例如 <code>{{ message }}</code> 会读取 <code>vm.message</code>）。<strong>一旦读取数据，数据的 getter 就会被触发，当前这个渲染 Watcher 就会被收集到该数据的 Dep 中</strong>。这就完成了<strong>依赖收集</strong>。</li><li><code>vm._update()</code>：将 <code>_render()</code> 返回的新 VNode 树传入。由于是首次渲染，没有旧的 VNode，所以会直接根据 VNode 创建真实的 DOM 元素。</li><li><strong>Patch 过程</strong>：递归地遍历 VNode 树，创建对应的真实 DOM 节点。最终，这个完整的 DOM 树会被插入到 <code>vm.$el</code>（即 <code>el</code> 选项对应的 DOM 元素，如 <code>#app</code>）中，替换掉原来的占位元素。</li></ul></li></ol><p>至此，页面上就显示出了 <code>data</code> 中初始数据所对应的视图。实例也进入了“已挂载”（Mounted）状态。</p><hr><h3 id="阶段五-更新-update-运行期" tabindex="-1"><a class="header-anchor" href="#阶段五-更新-update-运行期"><span>阶段五：更新（Update） - 运行期</span></a></h3><p>挂载完成后，应用进入运行期。</p><ol><li><p><strong>触发更新</strong>：<br> 当用户交互或异步操作导致响应式数据发生变化时（例如 <code>vm.message = &#39;Hi!&#39;</code>），数据的 setter 会被触发。</p></li><li><p><strong>通知依赖</strong>：<br> setter 会通知它对应的 Dep，Dep 会通知所有订阅它的 Watcher（包括我们的渲染 Watcher）：“数据变了！”</p></li><li><p><strong>异步更新队列</strong>：<br> Vue 不会立即执行更新。而是将需要更新的 Watcher 推入一个<strong>异步队列</strong>。在下一个事件循环“tick”中，Vue 会清空这个队列，执行所有 Watcher 的 <code>run</code> 方法。</p></li><li><p><strong>重新渲染</strong>：<br> 渲染 Watcher 的 <code>run</code> 方法会再次执行 <code>updateComponent</code>。</p><ul><li><code>vm._render()</code>：用<strong>新的数据</strong>再次生成<strong>新的 VNode 树</strong>。</li><li><code>vm._update()</code>：将<strong>新的 VNode 树</strong>与<strong>上一次渲染的旧 VNode 树</strong>进行对比（Diff 算法）。</li><li><strong>Patch 过程</strong>：计算出最小差异，然后只更新需要改变的真实 DOM 部分。</li></ul></li></ol><p>这个过程会在应用的整个生命周期中不断重复。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>我们可以将挂载过程简化为一个流程图：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>new Vue(options)</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>初始化生命周期、事件、渲染功能</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>(如果有模板) 编译模板 -&gt; 生成 render 函数</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>建立响应式系统 (initState)</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>调用 $mount -&gt; 创建渲染 Watcher</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>执行初始渲染 (_render -&gt; VNode -&gt; _update -&gt; Patch -&gt; DOM)</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>触发 mounted 钩子</span></span>
<span class="line"><span>      |</span></span>
<span class="line"><span>      v</span></span>
<span class="line"><span>进入运行期 -&gt; 数据变化 -&gt; 触发 setter -&gt; 通知 Watcher -&gt; 异步更新 -&gt; 重新渲染</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>它从初始化开始，经过模板编译和响应式系统的建立，最终通过渲染 Watcher 和 Virtual DOM 的 Patch 机制，将数据映射为视图，并在此后通过响应式系统持续驱动视图更新。</strong></p>`,32)])])}const r=i(t,[["render",l]]),c=JSON.parse('{"path":"/guide/source-code/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"Vue2 源码解析","lang":"zh-CN","frontmatter":{"title":"Vue2 源码解析","icon":"circle-info","description":"Vue2 源码解析 总览：一个完整的挂载流程 一个 Vue 实例从创建到最终在页面上呈现，大致经历了以下关键步骤： 初始化（Init）：初始化实例的生命周期、事件、渲染函数等。 编译（Compilation）：将模板编译成渲染函数（如果使用运行时+编译器的 Vue 版本）。 建立响应式（Reactivity）：处理 data、props、compute...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2 源码解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-17T15:59:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/source-code/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Vue2 源码解析"}],["meta",{"property":"og:description","content":"Vue2 源码解析 总览：一个完整的挂载流程 一个 Vue 实例从创建到最终在页面上呈现，大致经历了以下关键步骤： 初始化（Init）：初始化实例的生命周期、事件、渲染函数等。 编译（Compilation）：将模板编译成渲染函数（如果使用运行时+编译器的 Vue 版本）。 建立响应式（Reactivity）：处理 data、props、compute..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T15:59:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T15:59:21.000Z"}]]},"git":{"createdTime":1760704942000,"updatedTime":1760716761000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":2,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.7,"words":1711},"filePathRelative":"guide/source-code/Vue2源码解析.md","autoDesc":true}');export{r as comp,c as data};
