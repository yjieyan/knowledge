import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,f as e,o as t}from"./app-DtG3coGW.js";const l={};function r(p,s){return t(),a("div",null,[s[0]||(s[0]=n(`<h1 id="实现一个简易md编辑器-支持实时预览并展示渲染效果" tabindex="-1"><a class="header-anchor" href="#实现一个简易md编辑器-支持实时预览并展示渲染效果"><span>实现一个简易MD编辑器，支持实时预览并展示渲染效果</span></a></h1><p>1）核心思路</p><p>实现一个简易的 Markdown 编辑器，主要包括两个部分：输入区（用于编写 Markdown 文本）和预览区（实时渲染 Markdown 内容）。用户在输入区输入 Markdown 语法内容，编辑器会监听输入变化，实时将 Markdown 文本解析为 HTML，并在预览区展示渲染效果。</p><p>2）实现步骤</p><ul><li>使用 React 或 Vue 等前端框架，创建一个文本输入框（如 textarea）和一个用于展示渲染结果的区域。</li><li>监听输入框内容变化（如 onChange 事件），将 Markdown 文本传递给解析函数。</li><li>使用开源 Markdown 解析库（如 marked、markdown-it）将 Markdown 文本转换为 HTML。</li><li>将解析后的 HTML 通过 dangerouslySetInnerHTML（React）或 v-html（Vue）渲染到页面上，实现实时预览。</li><li>可选：增加防抖处理，避免输入过快导致性能问题。</li></ul><p>3）代码实现示例（React + marked）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>//src/components/MarkdownEditor.js</span></span>
<span class="line"><span>import { useState } from &quot;react&quot;;</span></span>
<span class="line"><span>import { marked } from &quot;marked&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default function MarkdownEditor() {</span></span>
<span class="line"><span>  const [value, setValue] = useState(&quot;# Hello Markdown!&quot;);</span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div style={{ display: &quot;flex&quot;, gap: 20 }}&gt;</span></span>
<span class="line"><span>      &lt;textarea</span></span>
<span class="line"><span>        style={{ width: 300, height: 300 }}</span></span>
<span class="line"><span>        value={value}</span></span>
<span class="line"><span>        onChange={e =&gt; setValue(e.target.value)}</span></span>
<span class="line"><span>      /&gt;</span></span>
<span class="line"><span>      &lt;div</span></span>
<span class="line"><span>        style={{ width: 300, height: 300, border: &quot;1px solid #ccc&quot;, padding: 10, overflow: &quot;auto&quot; }}</span></span>
<span class="line"><span>        dangerouslySetInnerHTML={{ __html: marked(value) }}</span></span>
<span class="line"><span>      /&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）注意事项</p><ul><li>为了安全，生产环境下建议对解析后的 HTML 进行 XSS 过滤（如使用 DOMPurify）。</li><li>可以根据需求扩展功能，如支持代码高亮、图片上传、全屏编辑等。</li></ul><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h2><h3 id="_1-常用-markdown-解析库" tabindex="-1"><a class="header-anchor" href="#_1-常用-markdown-解析库"><span>1）常用 Markdown 解析库</span></a></h3><ul><li>marked：轻量、速度快，社区活跃，支持扩展语法。</li><li>markdown-it：插件丰富，支持自定义渲染规则。</li><li>showdown：兼容性好，API 简单。</li></ul><h3 id="_2-代码高亮" tabindex="-1"><a class="header-anchor" href="#_2-代码高亮"><span>2）代码高亮</span></a></h3><p>如果需要对 Markdown 中的代码块进行高亮，可以结合 highlight.js 或 prism.js。以 marked 为例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">marked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;marked&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hljs</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;highlight.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;highlight.js/styles/github.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">marked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  highlight</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> hljs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">highlightAuto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-防止-xss-攻击" tabindex="-1"><a class="header-anchor" href="#_3-防止-xss-攻击"><span>3）防止 XSS 攻击</span></a></h3><p>Markdown 解析后生成的 HTML 可能包含恶意脚本，建议结合 DOMPurify 进行过滤：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>import DOMPurify from &quot;dompurify&quot;;</span></span>
<span class="line"><span>&lt;div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(marked(value)) }} /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-mermaid-流程图辅助" tabindex="-1"><a class="header-anchor" href="#_4-mermaid-流程图辅助"><span>4）Mermaid 流程图辅助</span></a></h3><h3 id="_5-相关文档地址" tabindex="-1"><a class="header-anchor" href="#_5-相关文档地址"><span>5）相关文档地址</span></a></h3><ul><li>marked 官方文档：<a href="https://marked.js.org/" target="_blank" rel="noopener noreferrer">https://marked.js.org/</a></li><li>markdown-it 官方文档：<a href="https://markdown-it.github.io/" target="_blank" rel="noopener noreferrer">https://markdown-it.github.io/</a></li><li>React 官方文档：<a href="https://react.dev/" target="_blank" rel="noopener noreferrer">https://react.dev/</a></li><li>DOMPurify：<a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noopener noreferrer">https://github.com/cure53/DOMPurify</a></li><li>highlight.js：<a href="https://highlightjs.org/" target="_blank" rel="noopener noreferrer">https://highlightjs.org/</a></li></ul>`,21)),e(` ## 项目实战

我们将上述的题解方案整合成了一个案例项目，感兴趣的同学可以动手下载下来结合题解分析一下项目源码，相信 会有更深入的理解，你也可以在线访问项目地址进行体验。

![image.png](https://pic.code-nav.cn/mianshiya/question_picture/1810587471143874561/EdlJ51zB_image.png)

项目源码：

<https://github.com/mianshiya/exampleProject/tree/main/project-bolt-sb1-oizk3jd8>

在线地址： <https://wonderful-figolla-a89b88.netlify.app/> `)])}const o=i(l,[["render",r]]),k=JSON.parse('{"path":"/guide/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAMD%E7%BC%96%E8%BE%91%E5%99%A8.html","title":"实现一个简易MD编辑器，支持实时预览并展示渲染效果","lang":"zh-CN","frontmatter":{"description":"实现一个简易MD编辑器，支持实时预览并展示渲染效果 1）核心思路 实现一个简易的 Markdown 编辑器，主要包括两个部分：输入区（用于编写 Markdown 文本）和预览区（实时渲染 Markdown 内容）。用户在输入区输入 Markdown 语法内容，编辑器会监听输入变化，实时将 Markdown 文本解析为 HTML，并在预览区展示渲染效果。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实现一个简易MD编辑器，支持实时预览并展示渲染效果\\",\\"image\\":[\\"https://pic.code-nav.cn/mianshiya/question_picture/1810587471143874561/EdlJ51zB_image.png\\"],\\"dateModified\\":\\"2025-10-20T09:11:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAMD%E7%BC%96%E8%BE%91%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"学习与分享"}],["meta",{"property":"og:title","content":"实现一个简易MD编辑器，支持实时预览并展示渲染效果"}],["meta",{"property":"og:description","content":"实现一个简易MD编辑器，支持实时预览并展示渲染效果 1）核心思路 实现一个简易的 Markdown 编辑器，主要包括两个部分：输入区（用于编写 Markdown 文本）和预览区（实时渲染 Markdown 内容）。用户在输入区输入 Markdown 语法内容，编辑器会监听输入变化，实时将 Markdown 文本解析为 HTML，并在预览区展示渲染效果。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.code-nav.cn/mianshiya/question_picture/1810587471143874561/EdlJ51zB_image.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-20T09:11:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-20T09:11:06.000Z"}]]},"git":{"createdTime":1760951466000,"updatedTime":1760951466000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":1,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":2.16,"words":649},"filePathRelative":"guide/项目实战/实现一个MD编辑器.md","autoDesc":true}');export{o as comp,k as data};
