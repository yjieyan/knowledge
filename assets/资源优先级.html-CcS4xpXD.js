import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,o as e}from"./app-B9rz_4sR.js";const l={};function a(h,s){return e(),t("div",null,[...s[0]||(s[0]=[n(`<p>这是一个非常实用的前端性能优化话题。<code>preload</code>、<code>prefetch</code> 和 <code>preconnect</code> 都是通过 <strong><code>&lt;link&gt;</code> 标签</strong> 或 <strong>HTTP 头</strong> 来指示浏览器如何优化资源加载的指令，但它们的目标和时机截然不同。</p><p>理解并正确使用它们，可以显著提升页面的加载性能和用户体验。</p><hr><h3 id="核心思想-资源提示" tabindex="-1"><a class="header-anchor" href="#核心思想-资源提示"><span>核心思想：资源提示</span></a></h3><p>它们的核心思想是 <strong>“让浏览器更聪明地工作”</strong>。浏览器自身的预加载扫描器已经很强大，但它主要关注当前页面内的显式资源。这些指令允许我们主动告知浏览器关于 <strong>当前页面即将需要</strong> 或 <strong>未来页面可能需要的</strong> 关键资源，从而更早地启动关键操作。</p><hr><h3 id="一、-preload-为当前页面服务" tabindex="-1"><a class="header-anchor" href="#一、-preload-为当前页面服务"><span>一、 <code>preload</code> - 为当前页面服务</span></a></h3><p><strong>核心作用</strong>：<strong>强制浏览器为当前导航页面，以高优先级尽快获取并缓存一个必定会用到的重要资源。</strong></p><ul><li><strong>时机</strong>：<strong>当前页面</strong>，<strong>立即</strong> 加载。</li><li><strong>优先级</strong>：<strong>高</strong>。浏览器会将其视为与当前页面渲染阻塞资源同等重要。</li><li><strong>使用场景</strong>： <ol><li><strong>隐藏在 CSS/JS 中的关键字体</strong>。</li><li><strong>首屏关键图片</strong>（如 Hero Image）。</li><li><strong>关键的 CSS 或 JavaScript 块</strong>。</li><li>在 JavaScript 运行时才决定加载的资源。</li></ol></li></ul><p><strong>如何使用：</strong></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 通过 HTML 标签 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;font.woff2&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;font&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;font/woff2&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> crossorigin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;critical-image.jpg&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;critical-styles.css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;style&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;main.js&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 通过 HTTP 响应头 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Link: &lt;/</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">css/styles.css</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;; rel=preload; as=style</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键属性：</strong></p><ul><li><code>as</code>：<strong>必须指定</strong>。告诉浏览器资源的类型，以便浏览器设置正确的优先级、应用正确的安全策略（如 <code>font</code> 需要 <code>crossorigin</code>）并将其存储在正确的缓存中。常见值：<code>script</code>, <code>style</code>, <code>font</code>, <code>image</code>, <code>document</code> 等。</li><li><code>type</code>：可选，资源的 MIME 类型，帮助浏览器判断是否支持该资源。</li><li><code>crossorigin</code>：对于 CORS 资源（如字体）必须设置，即使同源。</li></ul><p><strong>⚠️ 注意事项</strong>：</p><ul><li><strong>不要滥用</strong>：滥用 <code>preload</code> 会与真正关键的资源竞争带宽，反而损害性能。</li><li><strong>正确设置 <code>as</code></strong>：错误的 <code>as</code> 会导致资源被重复加载。</li></ul><hr><h3 id="二、-prefetch-为未来页面服务" tabindex="-1"><a class="header-anchor" href="#二、-prefetch-为未来页面服务"><span>二、 <code>prefetch</code> - 为未来页面服务</span></a></h3><p><strong>核心作用</strong>：<strong>提示浏览器在空闲时间，提前获取用户</strong>未来可能访问<strong>的页面或资源，并存入缓存。</strong></p><ul><li><strong>时机</strong>：<strong>当前页面</strong>，<strong>空闲时</strong> 加载。</li><li><strong>优先级</strong>：<strong>低</strong>。浏览器会在处理完所有当前页面的关键资源后，再利用空闲带宽进行加载。</li><li><strong>使用场景</strong>： <ol><li><strong>预取下一个页面的资源</strong>。例如，在电商首页，预取用户最可能点击的商品详情页的 CSS 和 JS。</li><li><strong>预取用户下一步操作可能需要的资源</strong>。例如，在搜索结果页，预取排在第一位的详情页资源。</li></ol></li></ul><p><strong>如何使用：</strong></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 预取下一个页面的 HTML 本身 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/next-page.html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 预取下一个页面需要的静态资源 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/js/next-page-bundle.js&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/css/next-page-styles.css&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;style&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>prefetch</code> 的类型</strong>：</p><ul><li><strong>Link Prefetch</strong>：如上所示，用于预取 HTML、JS、CSS 等文档资源。</li><li><strong>DNS Prefetch</strong> (<code>dns-prefetch</code>)：仅提前进行 DNS 解析。开销极小，适用于跨域域名。<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://api.example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h3 id="三、-preconnect-建立早期连接" tabindex="-1"><a class="header-anchor" href="#三、-preconnect-建立早期连接"><span>三、 <code>preconnect</code> - 建立早期连接</span></a></h3><p><strong>核心作用</strong>：<strong>提示浏览器提前与一个第三方源建立网络连接，包括 DNS 查询、TCP 握手和可选的 TLS 协商。</strong></p><ul><li><strong>时机</strong>：<strong>当前页面</strong>，<strong>立即</strong> 建立连接。</li><li><strong>优先级</strong>：<strong>中高</strong>。它不下载资源，只建立连接。</li><li><strong>使用场景</strong>： <ol><li>已知在不久的将来会从某个<strong>第三方源</strong>请求资源。</li><li>例如，来自 Google Fonts 的字体、来自 CDN 的静态资源、关键的 API 接口域名。</li></ol></li></ul><p><strong>为什么有用？</strong><br> 建立连接（特别是 TLS 握手）可能相当耗时，通常需要 1-2 次 RTT（往返时间）。提前完成这些工作，当真正需要请求资源时，就可以立即开始数据传输，感觉上“零延迟”。</p><p><strong>如何使用：</strong></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preconnect&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://fonts.googleapis.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preconnect&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://cdn.example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>与 <code>dns-prefetch</code> 的关系</strong>：</p><ul><li><code>preconnect</code> 包含了 <code>dns-prefetch</code> 的功能，且做得更多（TCP+TLS）。</li><li><strong>建议</strong>：对<strong>关键的、即将请求的</strong>第三方源使用 <code>preconnect</code>。对<strong>其他不太重要</strong>的第三方源，可以使用开销更小的 <code>dns-prefetch</code> 作为备选。</li></ul><hr><h3 id="对比总结与决策流程图" tabindex="-1"><a class="header-anchor" href="#对比总结与决策流程图"><span>对比总结与决策流程图</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;"><code>preload</code></th><th style="text-align:left;"><code>prefetch</code></th><th style="text-align:left;"><code>preconnect</code></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>目标</strong></td><td style="text-align:left;"><strong>当前页面</strong> 的<strong>关键资源</strong></td><td style="text-align:left;"><strong>未来页面</strong> 的<strong>可能资源</strong></td><td style="text-align:left;"><strong>当前页面</strong> 的<strong>第三方源连接</strong></td></tr><tr><td style="text-align:left;"><strong>时机</strong></td><td style="text-align:left;">立即，高优先级</td><td style="text-align:left;">空闲时，低优先级</td><td style="text-align:left;">立即，中高优先级</td></tr><tr><td style="text-align:left;"><strong>缓存</strong></td><td style="text-align:left;">存储在本地缓存，供当前页面使用</td><td style="text-align:left;">存储在本地缓存，供未来页面使用</td><td style="text-align:left;">不缓存资源，只建立连接</td></tr><tr><td style="text-align:left;"><strong>典型用例</strong></td><td style="text-align:left;">关键字体、首屏图片、关键CSS/JS</td><td style="text-align:left;">下一页的HTML、JS、CSS</td><td style="text-align:left;">CDN、字体提供商、API端点</td></tr></tbody></table><p><strong>如何选择？一个简单的决策流程：</strong></p><ol><li><strong>这个资源是当前页面渲染所必需的吗？</strong><ul><li><strong>是</strong> -&gt; 使用 <strong><code>preload</code></strong>。</li><li><strong>否</strong> -&gt; 进入下一步。</li></ul></li><li><strong>这个资源是用户下一步操作（如跳转下一页）才需要的吗？</strong><ul><li><strong>是</strong> -&gt; 使用 <strong><code>prefetch</code></strong>。</li><li><strong>否</strong> -&gt; 进入下一步。</li></ul></li><li><strong>我需要从一个第三方域名请求重要资源，但还没到具体请求的时候吗？</strong><ul><li><strong>是</strong> -&gt; 使用 <strong><code>preconnect</code></strong>（或 <code>dns-prefetch</code>）。</li></ul></li></ol><h3 id="最佳实践与注意事项" tabindex="-1"><a class="header-anchor" href="#最佳实践与注意事项"><span>最佳实践与注意事项</span></a></h3><ol><li><strong>测量优先</strong>：不要盲目添加。使用 Chrome DevTools 的 <strong>Performance</strong> 和 <strong>Network</strong> 面板分析关键请求链，找到性能瓶颈再应用。</li><li><strong>动态注入</strong>：可以使用 JavaScript 动态创建这些 <code>&lt;link&gt;</code> 标签，以便根据用户行为做出更智能的决策（例如，当鼠标悬停在按钮上时，预取下一个页面的资源）。</li><li><strong>注意开销</strong>： <ul><li><code>preload</code> 会消耗宝贵带宽，可能影响其他关键资源的加载。</li><li><code>preconnect</code> 会与服务器建立连接，有服务器端开销。通常限制在 4-6 个连接以内。</li></ul></li><li><strong>兼容性</strong>：现代浏览器对它们的支持良好，但在生产环境中使用时仍需考虑回退方案。</li></ol><p><strong>这三者是我们作为前端工程师，主动干预浏览器加载行为、优化关键渲染路径和提升用户感知性能的“利器”。正确地区分和使用它们，是构建高性能 Web 应用的关键技能之一。</strong></p>`,40)])])}const p=i(l,[["render",a]]),k=JSON.parse('{"path":"/guide/computer/%E7%BD%91%E7%BB%9C/%E8%B5%84%E6%BA%90%E4%BC%98%E5%85%88%E7%BA%A7.html","title":"","lang":"zh-CN","frontmatter":{"description":"这是一个非常实用的前端性能优化话题。preload、prefetch 和 preconnect 都是通过 <link> 标签 或 HTTP 头 来指示浏览器如何优化资源加载的指令，但它们的目标和时机截然不同。 理解并正确使用它们，可以显著提升页面的加载性能和用户体验。 核心思想：资源提示 它们的核心思想是 “让浏览器更聪明地工作”。浏览器自身的预加载扫...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T03:59:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/%E7%BD%91%E7%BB%9C/%E8%B5%84%E6%BA%90%E4%BC%98%E5%85%88%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:description","content":"这是一个非常实用的前端性能优化话题。preload、prefetch 和 preconnect 都是通过 <link> 标签 或 HTTP 头 来指示浏览器如何优化资源加载的指令，但它们的目标和时机截然不同。 理解并正确使用它们，可以显著提升页面的加载性能和用户体验。 核心思想：资源提示 它们的核心思想是 “让浏览器更聪明地工作”。浏览器自身的预加载扫..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T03:59:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T03:59:38.000Z"}]]},"git":{"createdTime":1760716761000,"updatedTime":1760759978000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":2,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":5.37,"words":1610},"filePathRelative":"guide/computer/网络/资源优先级.md","autoDesc":true}');export{p as comp,k as data};
