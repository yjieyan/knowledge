import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as i,o as n}from"./app-cefFWyo2.js";const a={};function l(o,e){return n(),t("div",null,[...e[0]||(e[0]=[i(`<p>HTTP 缓存是前端性能优化中最为核心和有效的手段之一，它直接决定了资源是否需要从网络重新加载。一个设计良好的缓存策略可以极大提升用户体验并减轻服务器压力。</p><p>我将从 <strong>缓存位置、缓存流程、具体策略</strong> 三个方面来系统阐述。</p><hr><h3 id="一、-缓存的位置" tabindex="-1"><a class="header-anchor" href="#一、-缓存的位置"><span>一、 缓存的位置</span></a></h3><p>浏览器缓存主要涉及两个位置：</p><ol><li><strong>Disk Cache</strong>：存储在硬盘上，容量大，但读取速度较慢。</li><li><strong>Memory Cache</strong>：存储在内存中，容量小，但读取速度极快。关闭标签页后数据会失效。</li></ol><p>浏览器会根据资源的大小、类型等因素智能地决定将资源存放在哪个缓存中。</p><hr><h3 id="二、-核心缓存流程" tabindex="-1"><a class="header-anchor" href="#二、-核心缓存流程"><span>二、 核心缓存流程</span></a></h3><p>一个完整的 HTTP 缓存决策流程，遵循着 <strong>“先强缓存，后协商缓存”</strong> 的逻辑。下图清晰地展示了一次资源请求的完整缓存判断路径：</p><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mermaid"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    A[发起资源请求] --&gt; B{缓存中是否有&lt;br&gt;该资源副本？}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B -- 否 --&gt; C[向服务器发起请求]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    C --&gt; D[服务器返回资源与缓存策略]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    D --&gt; E[将资源与策略存入缓存]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    E --&gt; F[返回资源]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B -- 是 --&gt; G{强缓存失效？</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;br&gt;检查 Cache-Control/Expires}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    G -- 未失效（命中强缓存） --&gt; H[状态码 200 (from cache)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    H --&gt; I[返回缓存副本&lt;br&gt;无需网络请求]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    G -- 已失效 --&gt; J[携带缓存标识发起请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;br&gt;If-None-Match / If-Modified-Since]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    J --&gt; K{服务器验证缓存？</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;br&gt;检查 Etag/Last-Modified}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    K -- 有效（命中协商缓存） --&gt; L[状态码 304 (Not Modified)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    L --&gt; M[更新缓存头信息]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    M --&gt; F</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    K -- 已失效 --&gt; C</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个流程确保了在资源未发生变化时，浏览器能以最快的速度（从本地缓存）加载资源，同时在资源更新后，能及时从服务器获取最新内容。</p><hr><h3 id="三、-缓存策略详解" tabindex="-1"><a class="header-anchor" href="#三、-缓存策略详解"><span>三、 缓存策略详解</span></a></h3><h4 id="_1-强缓存" tabindex="-1"><a class="header-anchor" href="#_1-强缓存"><span>1. 强缓存</span></a></h4><p>强缓存的核心是：<strong>在缓存失效前，浏览器不会与服务器通信，直接使用本地缓存。</strong> 这带来了极快的加载速度。</p><p>控制强缓存的 HTTP 头部主要有两个：</p><ul><li><p><strong><code>Cache-Control</code> (HTTP/1.1，优先级更高)</strong><br> 这是一个通用头，指令非常灵活，是现代 Web 开发的首选。</p><ul><li><code>max-age=&lt;seconds&gt;</code>：缓存的最大生存时间，相对于请求的时间。例如 <code>max-age=31536000</code> 表示缓存一年。</li><li><code>public</code>：表明响应可以被任何对象（客户端、代理服务器等）缓存。</li><li><code>private</code>：表明响应只能被单个用户（浏览器）缓存，不能被代理服务器等共享缓存。</li><li><code>no-cache</code>：<strong>不是不缓存，而是使用缓存前必须向服务器验证</strong>（即跳过强缓存，直接进入协商缓存）。</li><li><code>no-store</code>：<strong>真正的不缓存</strong>，完全不使用任何缓存。每次都要从服务器重新下载。</li></ul></li><li><p><strong><code>Expires</code> (HTTP/1.0)</strong><br> 指定一个绝对的资源过期时间。</p><ul><li><code>Expires: Wed, 21 Oct 2025 07:28:00 GMT</code></li><li><strong>缺点</strong>：依赖客户端时间，如果客户端和服务器时间不同步，会导致缓存失效不准。现在基本被 <code>Cache-Control</code> 的 <code>max-age</code> 取代。</li></ul></li></ul><p><strong>工作流程</strong>：浏览器检查 <code>Cache-Control</code> 和 <code>Expires</code>，判断缓存是否在有效期内。如果在，则 <strong>命中强缓存</strong>，返回 <code>200 OK (from memory/disk cache)</code>，<strong>网络请求显示为灰色</strong>。</p><h4 id="_2-协商缓存" tabindex="-1"><a class="header-anchor" href="#_2-协商缓存"><span>2. 协商缓存</span></a></h4><p>当强缓存失效后，浏览器便会携带缓存标识向服务器发起请求，进行协商缓存。服务器根据标识判断资源是否变化。</p><p>控制协商缓存的头部有两组：</p><ul><li><p><strong><code>Etag</code> / <code>If-None-Match</code> (优先级更高)</strong></p><ul><li><code>Etag</code>：服务器返回的资源标识符，通常是资源的哈希值或版本号。<strong>它能精确感知字节级别的变化</strong>。</li><li><code>If-None-Match</code>：客户端再次请求时，将上一次收到的 <code>Etag</code> 值放在此字段中发给服务器。</li><li><strong>流程</strong>：服务器比较当前资源的 <code>Etag</code> 和请求中的 <code>If-None-Match</code>。 <ul><li>一致 -&gt; 资源未变化 -&gt; 返回 <code>304 Not Modified</code>，不返回资源体。</li><li>不一致 -&gt; 资源已变化 -&gt; 返回 <code>200 OK</code> 和新的资源。</li></ul></li></ul></li><li><p><strong><code>Last-Modified</code> / <code>If-Modified-Since</code></strong></p><ul><li><code>Last-Modified</code>：服务器返回的资源最后修改时间。</li><li><code>If-Modified-Since</code>：客户端再次请求时，将上一次收到的 <code>Last-Modified</code> 值放在此字段中发给服务器。</li><li><strong>流程</strong>：服务器比较当前资源的修改时间和 <code>If-Modified-Since</code>。 <ul><li>时间相同或更晚 -&gt; 返回 <code>304 Not Modified</code>。</li></ul></li><li><strong>缺点</strong>： <ol><li>精度到秒，如果1秒内文件多次变化，无法感知。</li><li>文件内容可能未变，但修改时间改变了（如 touch 操作），会导致不必要的重新下载。</li></ol></li></ul></li></ul><p><strong>工作流程</strong>：强缓存失效后，浏览器携带 <code>If-None-Match</code> 和 <code>If-Modified-Since</code> 发起请求。服务器验证后，若资源未变，则 <strong>命中协商缓存</strong>，返回 <code>304 Not Modified</code>，浏览器从缓存加载资源。<strong>虽然产生了网络请求，但节省了传输资源体的流量</strong>。</p><hr><h3 id="四、-实战缓存策略与版本号管理" tabindex="-1"><a class="header-anchor" href="#四、-实战缓存策略与版本号管理"><span>四、 实战缓存策略与版本号管理</span></a></h3><p>如何为不同类型的资源设置缓存策略是前端工程化的关键。</p><h4 id="_1-哈希版本号策略" tabindex="-1"><a class="header-anchor" href="#_1-哈希版本号策略"><span>1. 哈希版本号策略</span></a></h4><p>这是解决 <strong>“资源更新后如何让用户获取最新内容”</strong> 这一核心问题的银弹。</p><ul><li><strong>原理</strong>：在构建阶段，为静态资源（JS、CSS、图片）的文件名生成一个基于内容的哈希值。 <ul><li>例如：<code>main.a1b2c3d4.js</code>, <code>style.e5f6g7h8.css</code>。</li></ul></li><li><strong>效果</strong>： <ul><li><strong>内容不变，哈希不变，文件名不变</strong> -&gt; 强缓存持续有效，用户命中缓存，性能最佳。</li><li><strong>内容改变，哈希改变，文件名改变</strong> -&gt; 对于浏览器来说，这是一个全新的 URL，因此会绕过所有缓存，直接从服务器下载新文件。</li></ul></li><li><strong>缓存策略</strong>：对于带哈希的文件，可以设置<strong>非常长的强缓存</strong>，例如 <code>Cache-Control: max-age=31536000, immutable</code>（<code>immutable</code> 告诉浏览器资源永不变，无需再验证）。</li></ul><h4 id="_2-html-文件的缓存策略" tabindex="-1"><a class="header-anchor" href="#_2-html-文件的缓存策略"><span>2. HTML 文件的缓存策略</span></a></h4><p>HTML 通常是入口文件，它应该<strong>禁用或使用极短的强缓存</strong>（如 <code>no-cache</code> 或 <code>max-age=0</code>），并总是进行协商缓存。这样才能保证用户总能拿到最新的 HTML，从而通过其中引用的新哈希值资源文件来加载最新的静态资源。</p><h4 id="_3-通用策略总结" tabindex="-1"><a class="header-anchor" href="#_3-通用策略总结"><span>3. 通用策略总结</span></a></h4><table><thead><tr><th style="text-align:left;">资源类型</th><th style="text-align:left;">缓存策略</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>带哈希的 JS/CSS/图片</strong></td><td style="text-align:left;"><code>Cache-Control: max-age=31536000, immutable</code></td><td style="text-align:left;"><strong>永久缓存</strong>。依靠文件名变化来更新。</td></tr><tr><td style="text-align:left;"><strong>不带哈希的 JS/CSS</strong></td><td style="text-align:left;"><code>Cache-Control: no-cache</code></td><td style="text-align:left;"><strong>总是验证</strong>。依靠 <code>Etag</code> 或 <code>Last-Modified</code>。</td></tr><tr><td style="text-align:left;"><strong>HTML 文件</strong></td><td style="text-align:left;"><code>Cache-Control: no-cache</code></td><td style="text-align:left;"><strong>总是验证</strong>。确保能获取到最新的资源引用。</td></tr><tr><td style="text-align:left;"><strong>API 接口数据</strong></td><td style="text-align:left;"><code>Cache-Control: no-cache</code> 或 <code>private, max-age=较短时间</code></td><td style="text-align:left;">根据数据实时性要求决定。通常需要验证。</td></tr></tbody></table><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ol><li><strong>分层决策</strong>：浏览器遵循 <strong>强缓存 -&gt; 协商缓存</strong> 的流程，在速度和准确性之间取得最佳平衡。</li><li><strong>强缓存是性能之王</strong>：通过 <code>Cache-Control</code>（尤其是 <code>max-age</code>）实现，命中时无网络请求，体验最佳。</li><li><strong>协商缓存是保险丝</strong>：通过 <code>Etag</code>/<code>If-None-Match</code> 实现，在强缓存失效后，确保内容未变时能节省带宽。</li><li><strong>版本号是基石</strong>：<strong>静态资源使用内容哈希命名 + 长周期强缓存</strong> 是前端工程化中缓存实践的黄金法则。它完美解决了“更新”与“缓存”的矛盾。</li></ol><p>一个优秀的缓存策略，需要根据资源的特性进行精细化的配置，而以上这些原则和工具为我们提供了实现这一目标的完整蓝图。</p>`,37)])])}const c=s(a,[["render",l]]),p=JSON.parse('{"path":"/guide/computer/%E7%BD%91%E7%BB%9C/HTTP%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5.html","title":"","lang":"zh-CN","frontmatter":{"description":"HTTP 缓存是前端性能优化中最为核心和有效的手段之一，它直接决定了资源是否需要从网络重新加载。一个设计良好的缓存策略可以极大提升用户体验并减轻服务器压力。 我将从 缓存位置、缓存流程、具体策略 三个方面来系统阐述。 一、 缓存的位置 浏览器缓存主要涉及两个位置： Disk Cache：存储在硬盘上，容量大，但读取速度较慢。 Memory Cache：...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T03:59:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yjieyan\\",\\"url\\":\\"https://yjieyan.github.io/knowledge\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/knowledge/guide/computer/%E7%BD%91%E7%BB%9C/HTTP%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:description","content":"HTTP 缓存是前端性能优化中最为核心和有效的手段之一，它直接决定了资源是否需要从网络重新加载。一个设计良好的缓存策略可以极大提升用户体验并减轻服务器压力。 我将从 缓存位置、缓存流程、具体策略 三个方面来系统阐述。 一、 缓存的位置 浏览器缓存主要涉及两个位置： Disk Cache：存储在硬盘上，容量大，但读取速度较慢。 Memory Cache：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T03:59:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T03:59:38.000Z"}]]},"git":{"createdTime":1760716761000,"updatedTime":1760759978000,"contributors":[{"name":"yjy","username":"yjy","email":"2192242196@qq.com","commits":2,"url":"https://github.com/yjy"}]},"readingTime":{"minutes":6.45,"words":1934},"filePathRelative":"guide/computer/网络/HTTP缓存策略.md","autoDesc":true}');export{c as comp,p as data};
